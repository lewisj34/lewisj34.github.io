I"Æ~<p>This is just a brief tutorial in generating an edge detector with a conovlution
operation using cuDNN. For those who arenâ€™t familiar cuDNN is the deep learning 
primitive framework used as a backend for PyTorch and other higher-level 
mainstream deep learning frameworks.</p>

<figure class="highlight"><pre><code class="language-cpp" data-lang="cpp"><span class="cp">#include &lt;iostream&gt;
#include &lt;cudnn.h&gt;
#include &lt;cassert&gt;
#include &lt;cstdlib&gt;
</span>
<span class="cm">/****************************************************************

 FORWARD CONVOLUTION OPERATION 

****************************************************************/</span>


<span class="c1">// save an image to the working directory </span>
<span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="nf">load_image</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">image_path</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">image</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">imread</span><span class="p">(</span><span class="n">image_path</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">IMREAD_COLOR</span><span class="p">);</span>
	<span class="n">image</span><span class="p">.</span><span class="n">convertTo</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">CV_32FC3</span><span class="p">);</span>
	<span class="n">cv</span><span class="o">::</span><span class="n">normalize</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">image</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">NORM_MINMAX</span><span class="p">);</span>
	<span class="k">return</span> <span class="n">image</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">show_image</span><span class="p">(</span><span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">img</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">cv</span><span class="o">::</span><span class="n">imshow</span><span class="p">(</span><span class="s">"Test image"</span><span class="p">,</span> <span class="n">img</span><span class="p">);</span> 
	<span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span> <span class="c1">// Wait for a keystroke in the window </span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">SAVE_IMAGE</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">output_filename</span><span class="p">,</span>
    <span class="kt">float</span><span class="o">*</span> <span class="n">c_buffer_ptr</span><span class="p">,</span>
    <span class="kt">int</span> <span class="n">height</span><span class="p">,</span>
    <span class="kt">int</span> <span class="n">width</span><span class="p">)</span> 
<span class="p">{</span>
    <span class="c1">// create cv mat object from buffer and dimensions</span>
    <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">image</span><span class="p">(</span><span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">CV_32FC3</span><span class="p">,</span> <span class="n">c_buffer_ptr</span><span class="p">);</span>

    <span class="c1">// convert negative values to 0 </span>
    <span class="n">cv</span><span class="o">::</span><span class="n">threshold</span><span class="p">(</span><span class="n">image</span><span class="p">,</span>
        <span class="n">image</span><span class="p">,</span>
        <span class="cm">/*threshold=*/</span><span class="mi">0</span><span class="p">,</span>
        <span class="cm">/*maxval=*/</span><span class="mi">0</span><span class="p">,</span>
        <span class="n">cv</span><span class="o">::</span><span class="n">THRESH_TOZERO</span><span class="p">);</span>

    <span class="c1">// normalize the image pixels for greater contrast and visibility in output img</span>
    <span class="n">cv</span><span class="o">::</span><span class="n">normalize</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">image</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">255.0</span><span class="p">,</span> <span class="n">cv</span><span class="o">::</span><span class="n">NORM_MINMAX</span><span class="p">);</span>
    
    <span class="c1">// convert image to appropriate bit depth (8) and number of channels (3) </span>
    <span class="n">image</span><span class="p">.</span><span class="n">convertTo</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">CV_8UC3</span><span class="p">);</span>

    <span class="c1">// write to file</span>
    <span class="n">cv</span><span class="o">::</span><span class="n">imwrite</span><span class="p">(</span><span class="n">output_filename</span><span class="p">,</span> <span class="n">image</span><span class="p">);</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"Image output file directory: "</span> <span class="o">&lt;&lt;</span> <span class="n">output_filename</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// macro checkCUDAERRORS: return the error code and which line </span>
<span class="c1">// it was found on from the cudnnStatus_t object (if errors found)</span>
<span class="cp">#define checkCUDAERRORS(expr)                                \
  {                                                          \
    cudnnStatus_t status = (expr);                     \
    if (status != CUDNN_STATUS_SUCCESS) {                    \
      std::cerr &lt;&lt; "CUDNN ERROR ON LINE " &lt;&lt; __LINE__ &lt;&lt; ": "\
                &lt;&lt; cudnnGetErrorString(status) &lt;&lt; std::endl; \
      std::exit(EXIT_FAILURE);                               \
    }                                                        \
  }
</span>


<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> 
<span class="p">{</span>
    <span class="c1">// get GPU being used</span>
    <span class="kt">int</span> <span class="n">GPU</span> <span class="o">=</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">?</span> <span class="n">std</span><span class="o">::</span><span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"GPU: "</span> <span class="o">&lt;&lt;</span> <span class="n">GPU</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    
    <span class="c1">// sigmoid activation function implementation </span>
    <span class="kt">bool</span> <span class="n">sigmoid_usage</span> <span class="o">=</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">?</span> <span class="n">std</span><span class="o">::</span><span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span> <span class="o">:</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"With sigmoid: "</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">boolalpha</span> <span class="o">&lt;&lt;</span> <span class="n">sigmoid_usage</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

    <span class="c1">// get image file and load into mat obj</span>
    <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">image</span> <span class="o">=</span> <span class="n">load_image</span><span class="p">(</span><span class="s">"crack.jpg"</span><span class="p">);</span>

    <span class="n">cudaSetDevice</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

    <span class="c1">// get cuda context object </span>
    <span class="n">cudnnHandle_t</span> <span class="n">CUDNN_CONTEXT</span><span class="p">;</span>
    <span class="n">cudnnCreate</span><span class="p">(</span><span class="o">&amp;</span><span class="n">CUDNN_CONTEXT</span><span class="p">);</span>

    <span class="c1">// instantiate tensor descriptors/context objects </span>
    <span class="n">cudnnTensorDescriptor_t</span> <span class="n">input_desc</span><span class="p">;</span>
    <span class="n">cudnnFilterDescriptor_t</span> <span class="n">filter_desc</span><span class="p">;</span>
    <span class="n">cudnnConvolutionDescriptor_t</span> <span class="n">convolution_desc</span><span class="p">;</span>
    <span class="n">cudnnTensorDescriptor_t</span> <span class="n">output_descriptor</span><span class="p">;</span>

    <span class="c1">// define tensor descs and check for errors </span>
    <span class="n">checkCUDAERRORS</span><span class="p">(</span><span class="n">cudnnCreateTensorDescriptor</span><span class="p">(</span><span class="o">&amp;</span><span class="n">input_desc</span><span class="p">));</span>
    <span class="n">checkCUDAERRORS</span><span class="p">(</span><span class="n">cudnnSetTensor4dDescriptor</span><span class="p">(</span><span class="n">input_desc</span><span class="p">,</span>
        <span class="cm">/*format=*/</span><span class="n">CUDNN_TENSOR_NHWC</span><span class="p">,</span>
        <span class="cm">/*dataType=*/</span><span class="n">CUDNN_DATA_FLOAT</span><span class="p">,</span>
        <span class="cm">/*batch_size=*/</span><span class="mi">1</span><span class="p">,</span>
        <span class="cm">/*channels=*/</span><span class="mi">3</span><span class="p">,</span>
        <span class="cm">/*image_height=*/</span><span class="n">image</span><span class="p">.</span><span class="n">rows</span><span class="p">,</span>
        <span class="cm">/*image_width=*/</span><span class="n">image</span><span class="p">.</span><span class="n">cols</span><span class="p">));</span>

    <span class="n">checkCUDAERRORS</span><span class="p">(</span><span class="n">cudnnCreateFilterDescriptor</span><span class="p">(</span><span class="o">&amp;</span><span class="n">filter_desc</span><span class="p">));</span>
    <span class="n">checkCUDAERRORS</span><span class="p">(</span><span class="n">cudnnSetFilter4dDescriptor</span><span class="p">(</span><span class="n">filter_desc</span><span class="p">,</span>
        <span class="cm">/*dataType=*/</span><span class="n">CUDNN_DATA_FLOAT</span><span class="p">,</span>
        <span class="cm">/*format=*/</span><span class="n">CUDNN_TENSOR_NCHW</span><span class="p">,</span>
        <span class="cm">/*out_channels=*/</span><span class="mi">3</span><span class="p">,</span>
        <span class="cm">/*in_channels=*/</span><span class="mi">3</span><span class="p">,</span>
        <span class="cm">/*kernel_height=*/</span><span class="mi">3</span><span class="p">,</span>
        <span class="cm">/*kernel_width=*/</span><span class="mi">3</span><span class="p">));</span>

    <span class="n">checkCUDAERRORS</span><span class="p">(</span><span class="n">cudnnCreateConvolutionDescriptor</span><span class="p">(</span><span class="o">&amp;</span><span class="n">convolution_desc</span><span class="p">));</span>
    <span class="n">checkCUDAERRORS</span><span class="p">(</span><span class="n">cudnnSetConvolution2dDescriptor</span><span class="p">(</span><span class="n">convolution_desc</span><span class="p">,</span>
        <span class="cm">/*pad_height=*/</span><span class="mi">1</span><span class="p">,</span>
        <span class="cm">/*pad_width=*/</span><span class="mi">1</span><span class="p">,</span>
        <span class="cm">/*vertical_stride=*/</span><span class="mi">1</span><span class="p">,</span>
        <span class="cm">/*horizontal_stride=*/</span><span class="mi">1</span><span class="p">,</span>
        <span class="cm">/*dilation_height=*/</span><span class="mi">1</span><span class="p">,</span>
        <span class="cm">/*dilation_width=*/</span><span class="mi">1</span><span class="p">,</span>
        <span class="cm">/*mode=*/</span><span class="n">CUDNN_CROSS_CORRELATION</span><span class="p">,</span>
        <span class="cm">/*computeType=*/</span><span class="n">CUDNN_DATA_FLOAT</span><span class="p">));</span>

    <span class="kt">int</span> <span class="n">batch_size</span><span class="p">{</span> <span class="mi">0</span> <span class="p">},</span> <span class="n">channels</span><span class="p">{</span> <span class="mi">0</span> <span class="p">},</span> <span class="n">height</span><span class="p">{</span> <span class="mi">0</span> <span class="p">},</span> <span class="n">width</span><span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
    <span class="n">checkCUDAERRORS</span><span class="p">(</span><span class="n">cudnnGetConvolution2dForwardOutputDim</span><span class="p">(</span><span class="n">convolution_desc</span><span class="p">,</span>
        <span class="n">input_desc</span><span class="p">,</span>
        <span class="n">filter_desc</span><span class="p">,</span>
        <span class="o">&amp;</span><span class="n">batch_size</span><span class="p">,</span>
        <span class="o">&amp;</span><span class="n">channels</span><span class="p">,</span>
        <span class="o">&amp;</span><span class="n">height</span><span class="p">,</span>
        <span class="o">&amp;</span><span class="n">width</span><span class="p">));</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cerr</span> <span class="o">&lt;&lt;</span> <span class="s">"Image dimensions of Output Image: "</span>
        <span class="o">&lt;&lt;</span> <span class="n">height</span> <span class="o">&lt;&lt;</span> <span class="s">" x "</span> <span class="o">&lt;&lt;</span> <span class="n">width</span> <span class="o">&lt;&lt;</span> <span class="s">" x "</span> <span class="o">&lt;&lt;</span> <span class="n">channels</span>
        <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

    <span class="n">checkCUDAERRORS</span><span class="p">(</span><span class="n">cudnnCreateTensorDescriptor</span><span class="p">(</span><span class="o">&amp;</span><span class="n">output_descriptor</span><span class="p">));</span>
    <span class="n">checkCUDAERRORS</span><span class="p">(</span><span class="n">cudnnSetTensor4dDescriptor</span><span class="p">(</span><span class="n">output_descriptor</span><span class="p">,</span>
        <span class="cm">/*order of params=*/</span><span class="n">CUDNN_TENSOR_NHWC</span><span class="p">,</span>
        <span class="cm">/*type of data=*/</span><span class="n">CUDNN_DATA_FLOAT</span><span class="p">,</span>
        <span class="cm">/*size of batch=*/</span><span class="mi">1</span><span class="p">,</span>
        <span class="cm">/*num channels=*/</span><span class="mi">3</span><span class="p">,</span>
        <span class="cm">/*img height=*/</span><span class="n">image</span><span class="p">.</span><span class="n">rows</span><span class="p">,</span>
        <span class="cm">/*img width=*/</span><span class="n">image</span><span class="p">.</span><span class="n">cols</span><span class="p">));</span>

    <span class="kt">int</span> <span class="n">requested_algo_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">returned_algo_count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">cudnnConvolutionFwdAlgoPerf_t</span> <span class="n">conv_fwd_results</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>

    <span class="n">cudnnConvolutionFwdAlgo_t</span> <span class="n">algorithm_conv</span><span class="p">;</span>
    <span class="n">checkCUDAERRORS</span><span class="p">(</span>
        <span class="n">cudnnGetConvolutionForwardAlgorithm_v7</span><span class="p">(</span><span class="n">CUDNN_CONTEXT</span><span class="p">,</span>
            <span class="n">input_desc</span><span class="p">,</span>
            <span class="n">filter_desc</span><span class="p">,</span>
            <span class="n">convolution_desc</span><span class="p">,</span>
            <span class="n">output_descriptor</span><span class="p">,</span>
            <span class="n">requested_algo_count</span><span class="p">,</span> <span class="c1">// (cudnnConvolutionFwdPreference_t)forward_algo,</span>
            <span class="o">&amp;</span><span class="n">returned_algo_count</span><span class="p">,</span> <span class="c1">// workspace_size_specify,</span>
            <span class="n">conv_fwd_results</span><span class="p">));</span>

    <span class="kt">size_t</span> <span class="n">workspace_bytes</span><span class="p">{</span> <span class="mi">0</span> <span class="p">};</span>
    <span class="n">checkCUDAERRORS</span><span class="p">(</span><span class="n">cudnnGetConvolutionForwardWorkspaceSize</span><span class="p">(</span><span class="n">CUDNN_CONTEXT</span><span class="p">,</span>
        <span class="n">input_desc</span><span class="p">,</span>
        <span class="n">filter_desc</span><span class="p">,</span>
        <span class="n">convolution_desc</span><span class="p">,</span>
        <span class="n">output_descriptor</span><span class="p">,</span>
        <span class="n">algorithm_conv</span><span class="p">,</span>
        <span class="o">&amp;</span><span class="n">workspace_bytes</span><span class="p">));</span>

    <span class="n">assert</span><span class="p">(</span><span class="n">workspace_bytes</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>

    <span class="kt">void</span><span class="o">*</span> <span class="n">d_workspace</span><span class="p">{</span> <span class="nb">nullptr</span> <span class="p">};</span>
    <span class="n">cudaMalloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">d_workspace</span><span class="p">,</span> <span class="n">workspace_bytes</span><span class="p">);</span>

    <span class="kt">int</span> <span class="n">image_bytes</span> <span class="o">=</span> <span class="n">batch_size</span> <span class="o">*</span> <span class="n">channels</span> <span class="o">*</span> <span class="n">height</span> <span class="o">*</span> <span class="n">width</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">);</span>

    <span class="kt">float</span><span class="o">*</span> <span class="n">d_input</span><span class="p">{</span> <span class="nb">nullptr</span> <span class="p">};</span>
    <span class="n">cudaMalloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">d_input</span><span class="p">,</span> <span class="n">image_bytes</span><span class="p">);</span>
    <span class="n">cudaMemcpy</span><span class="p">(</span><span class="n">d_input</span><span class="p">,</span> <span class="n">image</span><span class="p">.</span><span class="n">ptr</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">image_bytes</span><span class="p">,</span> <span class="n">cudaMemcpyHostToDevice</span><span class="p">);</span>

    <span class="kt">float</span><span class="o">*</span> <span class="n">d_output</span><span class="p">{</span> <span class="nb">nullptr</span> <span class="p">};</span>
    <span class="n">cudaMalloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">d_output</span><span class="p">,</span> <span class="n">image_bytes</span><span class="p">);</span>
    <span class="n">cudaMemset</span><span class="p">(</span><span class="n">d_output</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">image_bytes</span><span class="p">);</span>

    <span class="k">const</span> <span class="kt">float</span> <span class="n">kernel_template</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
      <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
      <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">8</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
      <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">}</span>
    <span class="p">};</span>

    <span class="kt">float</span> <span class="n">h_kernel</span><span class="p">[</span><span class="mi">3</span><span class="p">][</span><span class="mi">3</span><span class="p">][</span><span class="mi">3</span><span class="p">][</span><span class="mi">3</span><span class="p">];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">kernel</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">kernel</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">kernel</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">channel</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">channel</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">channel</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">row</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">row</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">column</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">column</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="o">++</span><span class="n">column</span><span class="p">)</span> <span class="p">{</span>
                    <span class="n">h_kernel</span><span class="p">[</span><span class="n">kernel</span><span class="p">][</span><span class="n">channel</span><span class="p">][</span><span class="n">row</span><span class="p">][</span><span class="n">column</span><span class="p">]</span> <span class="o">=</span> <span class="n">kernel_template</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">column</span><span class="p">];</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">float</span><span class="o">*</span> <span class="n">d_kernel</span><span class="p">{</span> <span class="nb">nullptr</span> <span class="p">};</span>
    <span class="n">cudaMalloc</span><span class="p">(</span><span class="o">&amp;</span><span class="n">d_kernel</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">h_kernel</span><span class="p">));</span>
    <span class="n">cudaMemcpy</span><span class="p">(</span><span class="n">d_kernel</span><span class="p">,</span> <span class="n">h_kernel</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">h_kernel</span><span class="p">),</span> <span class="n">cudaMemcpyHostToDevice</span><span class="p">);</span>

    <span class="k">const</span> <span class="kt">float</span> <span class="n">alpha</span> <span class="o">=</span> <span class="mf">1.0</span><span class="n">f</span><span class="p">,</span> <span class="n">beta</span> <span class="o">=</span> <span class="mf">0.0</span><span class="n">f</span><span class="p">;</span>

    <span class="c1">// do a forward propagation </span>
    <span class="n">checkCUDAERRORS</span><span class="p">(</span><span class="n">cudnnConvolutionForward</span><span class="p">(</span><span class="n">CUDNN_CONTEXT</span><span class="p">,</span>
        <span class="o">&amp;</span><span class="n">alpha</span><span class="p">,</span>
        <span class="n">input_desc</span><span class="p">,</span>
        <span class="n">d_input</span><span class="p">,</span>
        <span class="n">filter_desc</span><span class="p">,</span>
        <span class="n">d_kernel</span><span class="p">,</span>
        <span class="n">convolution_desc</span><span class="p">,</span>
        <span class="n">algorithm_conv</span><span class="p">,</span>
        <span class="n">d_workspace</span><span class="p">,</span>
        <span class="n">workspace_bytes</span><span class="p">,</span>
        <span class="o">&amp;</span><span class="n">beta</span><span class="p">,</span>
        <span class="n">output_descriptor</span><span class="p">,</span>
        <span class="n">d_output</span><span class="p">));</span>

    <span class="c1">// apply activation function if sigmoid_usage = true </span>
    <span class="k">if</span> <span class="p">(</span><span class="n">sigmoid_usage</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">cudnnActivationDescriptor_t</span> <span class="n">activation_desc</span><span class="p">;</span>
        <span class="n">checkCUDAERRORS</span><span class="p">(</span><span class="n">cudnnCreateActivationDescriptor</span><span class="p">(</span><span class="o">&amp;</span><span class="n">activation_desc</span><span class="p">));</span>
        <span class="n">checkCUDAERRORS</span><span class="p">(</span><span class="n">cudnnSetActivationDescriptor</span><span class="p">(</span><span class="n">activation_desc</span><span class="p">,</span>
            <span class="n">CUDNN_ACTIVATION_SIGMOID</span><span class="p">,</span>
            <span class="n">CUDNN_PROPAGATE_NAN</span><span class="p">,</span>
            <span class="cm">/*relu_coef=*/</span><span class="mi">0</span><span class="p">));</span>
        <span class="n">checkCUDAERRORS</span><span class="p">(</span><span class="n">cudnnActivationForward</span><span class="p">(</span><span class="n">CUDNN_CONTEXT</span><span class="p">,</span>
            <span class="n">activation_desc</span><span class="p">,</span>
            <span class="o">&amp;</span><span class="n">alpha</span><span class="p">,</span>
            <span class="n">output_descriptor</span><span class="p">,</span>
            <span class="n">d_output</span><span class="p">,</span>
            <span class="o">&amp;</span><span class="n">beta</span><span class="p">,</span>
            <span class="n">output_descriptor</span><span class="p">,</span>
            <span class="n">d_output</span><span class="p">));</span>
        <span class="n">cudnnDestroyActivationDescriptor</span><span class="p">(</span><span class="n">activation_desc</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kt">float</span><span class="o">*</span> <span class="n">h_output</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">float</span><span class="p">[</span><span class="n">image_bytes</span><span class="p">];</span>
    <span class="n">cudaMemcpy</span><span class="p">(</span><span class="n">h_output</span><span class="p">,</span> <span class="n">d_output</span><span class="p">,</span> <span class="n">image_bytes</span><span class="p">,</span> <span class="n">cudaMemcpyDeviceToHost</span><span class="p">);</span>

    <span class="n">SAVE_IMAGE</span><span class="p">(</span><span class="s">"crack_out.png"</span><span class="p">,</span> <span class="n">h_output</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">width</span><span class="p">);</span>

    <span class="k">delete</span><span class="p">[]</span> <span class="n">h_output</span><span class="p">;</span>
    <span class="n">cudaFree</span><span class="p">(</span><span class="n">d_kernel</span><span class="p">);</span>
    <span class="n">cudaFree</span><span class="p">(</span><span class="n">d_input</span><span class="p">);</span>
    <span class="n">cudaFree</span><span class="p">(</span><span class="n">d_output</span><span class="p">);</span>
    <span class="n">cudaFree</span><span class="p">(</span><span class="n">d_workspace</span><span class="p">);</span>

    <span class="n">cudnnDestroyTensorDescriptor</span><span class="p">(</span><span class="n">input_desc</span><span class="p">);</span>
    <span class="n">cudnnDestroyTensorDescriptor</span><span class="p">(</span><span class="n">output_descriptor</span><span class="p">);</span>
    <span class="n">cudnnDestroyFilterDescriptor</span><span class="p">(</span><span class="n">filter_desc</span><span class="p">);</span>
    <span class="n">cudnnDestroyConvolutionDescriptor</span><span class="p">(</span><span class="n">convolution_desc</span><span class="p">);</span>

    <span class="n">cudnnDestroy</span><span class="p">(</span><span class="n">CUDNN_CONTEXT</span><span class="p">);</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"Done!</span><span class="se">\n</span><span class="s">"</span><span class="p">;</span> 
<span class="p">}</span>


<span class="cm">/*
Sources
https://github.com/BVLC/caffe/blob/master/src/caffe/layers/cudnn_conv_layer.cpp
http://www.goldsborough.me/cuda/ml/cudnn/c++/2017/10/01/14-37-23-convolutions_with_cudnn/
*/</span></code></pre></figure>

<p>If youâ€™ve run this correctly your input image, <code class="language-plaintext highlighter-rouge">crack.png</code>, should look like 
this:
<img src="/imgs/crack.jpg" alt="" title="Input" />
<!-- <img src="../imgs/crack.jpg" alt="MarineGEO circle logo" style="height: 100px; width:100px;"/> --></p>

<p>And your edge detected crack, <code class="language-plaintext highlighter-rouge">crack_out.png</code>, should look like this:
<img src="/imgs/crack_out.png" alt="Output" />
<!-- <img src="../imgs/crack_out.png" alt="MarineGEO circle logo"/> --></p>
:ET