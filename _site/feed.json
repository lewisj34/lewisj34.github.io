{
    "version": "https://jsonfeed.org/version/1",
    "title": "JCL",
    "home_page_url": "https://lewisj34.github.io//",
    "feed_url": "https://lewisj34.github.io//feed.json",
    "description": "Graduate student. Stuff I'm researching and find interesting.",
    "icon": "https://lewisj34.github.io//apple-touch-icon.png",
    "favicon": "https://lewisj34.github.io//favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "gesko",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://lewisj34.github.io//2022/10/01/videosegmasks",
            "title": "Generating Video with Segmentation Masks",
            "summary": null,
            "content_text": "This will be a bit of a long read. But most likely worth it! This is a tutorial describing how to generate videos with masks overlaid from a trained CNN.This tutorial assumes you have a trained model with a .pth file holding the trained weights. I trained my model using multiple GPUs so there is a segment of code in the following strip that has an option to put it into a torch.nn.DataParallel() objectThere’s a couple commandline options using the click interface. results_dir: where to save the results and where the config file detailing the model name is. checkpoint_pth: where the pth file is holding the trained model. dataset: the name of the dataset. save_dir: where the saved data corresponding to dataset is in .npy form is.This tutorial also assumes that the images you have are stills from a video that are in order numerically.So you should have a file structure of images like:images/├─ 1.png├─ 2.png├─ 3.png├─ ...gts/├─ 1.png├─ 2.png├─ 3.png├─ ...Through the code an output dir containing the image will be generated as:outputs/├─ 1.png├─ 2.png├─ 3.png├─ ...And here is the code!import os import cv2import torchimport clickimport yamlimport timeimport numpy as np import progressbar from model.FusionNetwork import NewFusionNetworkfrom data.dataset import get_tDatasetImageTestimport matplotlib.pyplot as plt from pathlib import Pathfrom imageio import imwritedef justGetBoundarySingleImage(    img_path: str,    output_path: str = None,):    \"\"\"    Takes a binary mask as input, @img_path, (just black + white) and returns     the boundary as a numpy array. Also saves it to the @output_path.     Taken from: https://medium.com/@rootaccess/how-to-detect-edges-of-a-mask-in-python-with-opencv-4bcdb3049682    \"\"\"    img_data = cv2.imread(img_path)    img_data = img_data &gt; 128    img_data = np.asarray(img_data[:, :, 0], dtype=np.double)    gx, gy = np.gradient(img_data)    temp_edge = gy * gy + gx * gx    temp_edge[temp_edge != 0.0] = 255.0    temp_edge = np.asarray(temp_edge, dtype=np.uint8)        if output_path != None:        cv2.imwrite(output_path, temp_edge)    return temp_edgedef overlayOriginalImage(    img_path: str,    msk_path: str,    maskColor: str = 'white', # white, red, purple    output_path: str = None,):    msk_edge = justGetBoundarySingleImage(msk_path)    og_image = cv2.imread(img_path)    msk_image = cv2.imread(msk_path, cv2.IMREAD_COLOR)    # uncomment this line     if maskColor == 'white':        pass    elif maskColor == 'red':        msk_image[np.where((msk_image==[255, 255, 255]).all(axis=2))] = [0, 0, 255]    elif maskColor == 'green':        msk_image[np.where((msk_image==[255, 255, 255]).all(axis=2))] = [255, 255, 0]    elif maskColor == 'lighter_pink':        msk_image[np.where((msk_image==[255, 255, 255]).all(axis=2))] = [255, 0, 0]    elif maskColor == 'pink':        msk_image[np.where((msk_image==[255, 255, 255]).all(axis=2))] = [255, 0, 255]    elif maskColor == 'grey':        msk_image[np.where((msk_image==[255, 255, 255]).all(axis=2))] = [255,165,0]    else:        raise ValueError(f'maskColor: {maskColor} not available.')    # this puts on the annotation or prediction with some transparency    merged_image = cv2.addWeighted(og_image,1.0,msk_image,0.2,1.0)            # now put on the border with no transparency / full opacity     merged_image = cv2.addWeighted(merged_image,1.0, cv2.cvtColor(msk_edge, cv2.COLOR_GRAY2RGB),1.0,1.0)    if output_path != None:        cv2.imwrite(output_path, merged_image)def getSortedListOfFilePaths(dir: str):    \"\"\"    returns list of files in @dir from os.listdir + the whole path to that file    \"\"\"    list = os.listdir(dir)    list = [x[:-4] for x in list]    list = sorted([int(x) for x in list])    list = [dir + '/' + str(x) + '.png' for x in list]    return listdef getSortedListofFileNames(dir: str):    \"\"\"    returns list of files from os.listdir just sorted (inc order) assuming ALL     numbers     same as above but just doesnt return the total path to the file it just     returns the file name     \"\"\"    list = os.listdir(dir)    list = [x[:-4] for x in list]    list = sorted([int(x) for x in list])    list = [str(x) + '.png' for x in list]    return listdef generate3Plot(    img_path: str = \"1_img.png\",    imgann_path: str = \"1_imgann.png\",    imgprd_path: str = \"1_img_prd.png\",    save_name: str = '1.png',):    \"\"\"    taking the images, image+pred masks overlays, image+ann masks overlays,     generates a 3 plot of each and saves them each to a directory     \"\"\"    img = cv2.imread(img_path, cv2.IMREAD_COLOR); img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)    ann = cv2.imread(imgann_path, cv2.IMREAD_COLOR); ann = cv2.cvtColor(ann, cv2.COLOR_BGR2RGB)    prd = cv2.imread(imgprd_path, cv2.IMREAD_COLOR); prd = cv2.cvtColor(prd, cv2.COLOR_BGR2RGB)    plt.style.use('seaborn-white')    # note super titles (Original, Annotaiton, Predicted) DO NOT WORK (they cut off)    # will have to add these manually if we want them though I think its easy    # to work around this     fig, axs = plt.subplots(nrows=1, ncols=3, figsize=(12,4))    for i, ax in enumerate(axs.flatten()):        plt.sca(ax)        if i == 0:            plt.imshow(img, cmap=plt.cm.jet)            # plt.title('Original')        elif i == 1:            plt.imshow(ann, cmap=plt.cm.jet)            # plt.title('Annotation')        elif i == 2:            plt.imshow(prd, cmap=plt.cm.jet)            # plt.title('Predicted')        ax.set_xticklabels([])        ax.set_yticklabels([])        ax.set_aspect('equal')        plt.axis('off')    plt.tight_layout()    plt.savefig(save_name)@click.command(help='')@click.option('--results_dir', type=str, default='results/DataParallel/DataParallel_11')@click.option('--checkpoint_pth', type=str, default='results/DataParallel/DataParallel_11/current_checkpoints/DataParallel-218.pth')@click.option('--dataset', type=str, default='CVC_ClinicDB')@click.option('--save_dir', type = str, default='seg/data/totals/CVC_ClinicDB/')def main(    model_name,    dataset,    results_dir,    checkpoint_pth,    save_dir,):    final_cfg = yaml.load(open(Path(results_dir) / \"final_config.yml\", \"r\"),        Loader=yaml.FullLoader)        model_name = final_cfg['model_name']    cnn_model_cfg = final_cfg['cnn_model_cfg']    trans_model_cfg = final_cfg['trans_model_cfg']        if model_name == 'NewFusionNetwork':        model = NewFusionNetwork(            cnn_model_cfg,            trans_model_cfg,            cnn_pretrained=False,            with_fusion=True,        ).cuda()    else:        raise ValueError(f'invalid model: {model_name}')    num_gpu = torch.cuda.device_count()    print(f'Number of GPUs: {num_gpu}')    for i in range(num_gpu):        print(f'Device name: {torch.cuda.get_device_name(i)}')    if num_gpu &gt; 1:        model = torch.nn.DataParallel(model)    print(f'Resuming at path: {os.path.basename(checkpoint_pth)}')    checkpoint = torch.load(checkpoint_pth)    model.load_state_dict(checkpoint['model_state_dict'])    # model.load_state_dict(torch.load(checkpoint_pth))    model.cuda()    model.eval()    save_path = results_dir + '/tests/' + dataset + '/'    os.makedirs(save_path, exist_ok=True)    os.makedirs(save_path + '/images/', exist_ok=True)    os.makedirs(save_path + '/gts/', exist_ok=True)    os.makedirs(save_path + '/outputs/', exist_ok=True)    print(f'os.save_path: {save_path}')    test_loader = get_tDatasetImageTest(        image_root = save_dir + \"/data_dataset_list_ordered.npy\",        gt_root = save_dir + \"/mask_dataset_list_ordered.npy\",        normalize_gt = False,        batch_size = 1,        normalization = \"vit\",        num_workers = 4,         pin_memory=True,        originalTxtFile= save_dir + \"/dataset_list_ordered.txt\", # if it's not in the save_dir you have to move it there    )    with progressbar.ProgressBar(max_value=len(test_loader)) as bar:        for i, image_gts in enumerate(test_loader):            time.sleep(0.1)            bar.update(i)                        images, gts, og_text = image_gts            print(f'og_text: {og_text[0]}')            images = images.cuda()            gts = gts.cuda()            with torch.no_grad():                output = model(images)            # output = model(images)            output = output.sigmoid().data.cpu().numpy().squeeze()                        name = dataset + '_' + str(i)            output_name = name + '_output.jpg'            image_name = name + '_image.jpg'            gt_name = name + '_gt.jpg'            images = images.cpu().numpy().squeeze()            gts = gts.cpu().numpy().squeeze().squeeze()            images = np.transpose(images, (1,2,0))            imwrite(save_path + '/outputs/' + og_text[0], output)            imwrite(save_path + '/images/' + og_text[0], images)            imwrite(save_path + '/gts/' + og_text[0], gts)    os.makedirs(save_dir + '/img_ann/', exist_ok=True)    os.makedirs(save_dir + '/img_prd/', exist_ok=True)    os.makedirs(save_dir + '/MultiPlot/', exist_ok=True)    img_names = getSortedListofFileNames(save_path + '/images/') # all file names are the same {1, 2, ... x.png}    img_paths = getSortedListOfFilePaths(save_path + '/images/')    ann_paths = getSortedListOfFilePaths(save_path + '/gts/')    prd_paths = getSortedListOfFilePaths(save_path + '/outputs/')    with progressbar.ProgressBar(max_value=len(img_names)) as bar:        for i in range(len(img_paths)):            time.sleep(0.1)            bar.update(i)            # do it for the img + anns            overlayOriginalImage(                img_path=img_paths[i],                msk_path=ann_paths[i],                maskColor='green',                output_path=save_dir + '/img_ann/' + img_names[i],            )            # now for the img + prds            overlayOriginalImage(                img_path=img_paths[i],                msk_path=prd_paths[i],                maskColor='pink',                output_path=save_dir + '/img_prd/' + img_names[i],            )            # now that we have img_anns + img_preds images saved, now MultiPlot            generate3Plot(                img_path=img_paths[i],                imgann_path=save_dir + '/img_ann/' + img_names[i],                imgprd_path=save_dir + '/img_prd/' + img_names[i],                save_name=save_dir + '/MultiPlot/' + img_names[i]            )    if __name__ == '__main__':    main()You can then take the images from img_prd (which is the prediction overlayed theoriginal image) or the images from img_ann (which is the annotation overlayed theoriginal image) or the images from MultiPlot which are the original image alongwith the img_prd and img_ann and plug them into a gif creator.For the CVC-ClinicDB polyp dataset, putting the images from MultiPlot would look like this:I used imgflip.com.Thanks for reading!",
            "content_html": "<p>This will be a bit of a long read. But most likely worth it! This is a tutorial describing how to generate videos with masks overlaid from a trained CNN.</p><p>This tutorial assumes you have a trained model with a .pth file holding the trained weights. I trained my model using multiple GPUs so there is a segment of code in the following strip that has an option to put it into a <code class=\"language-plaintext highlighter-rouge\">torch.nn.DataParallel()</code> object</p><p>There’s a couple commandline options using the click interface. <br /><code class=\"language-plaintext highlighter-rouge\">results_dir</code>: where to save the results and where the config file detailing the model name is. <br /><code class=\"language-plaintext highlighter-rouge\">checkpoint_pth</code>: where the pth file is holding the trained model. <br /><code class=\"language-plaintext highlighter-rouge\">dataset</code>: the name of the dataset. <br /><code class=\"language-plaintext highlighter-rouge\">save_dir</code>: where the saved data corresponding to <code class=\"language-plaintext highlighter-rouge\">dataset</code> is in .npy form is.<br /></p><p>This tutorial also assumes that the images you have are stills from a video that are <em>in order numerically</em>.</p><p>So you should have a file structure of images like:</p><figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\">images/├─ 1.png├─ 2.png├─ 3.png├─ ...gts/├─ 1.png├─ 2.png├─ 3.png├─ ...</code></pre></figure><p>Through the code an output dir containing the image will be generated as:</p><figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\">outputs/├─ 1.png├─ 2.png├─ 3.png├─ ...</code></pre></figure><p>And here is the code!</p><figure class=\"highlight\"><pre><code class=\"language-python\" data-lang=\"python\"><span class=\"kn\">import</span> <span class=\"nn\">os</span> <span class=\"kn\">import</span> <span class=\"nn\">cv2</span><span class=\"kn\">import</span> <span class=\"nn\">torch</span><span class=\"kn\">import</span> <span class=\"nn\">click</span><span class=\"kn\">import</span> <span class=\"nn\">yaml</span><span class=\"kn\">import</span> <span class=\"nn\">time</span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"n\">np</span> <span class=\"kn\">import</span> <span class=\"nn\">progressbar</span> <span class=\"kn\">from</span> <span class=\"nn\">model.FusionNetwork</span> <span class=\"kn\">import</span> <span class=\"n\">NewFusionNetwork</span><span class=\"kn\">from</span> <span class=\"nn\">data.dataset</span> <span class=\"kn\">import</span> <span class=\"n\">get_tDatasetImageTest</span><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"n\">plt</span> <span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span><span class=\"kn\">from</span> <span class=\"nn\">imageio</span> <span class=\"kn\">import</span> <span class=\"n\">imwrite</span><span class=\"k\">def</span> <span class=\"nf\">justGetBoundarySingleImage</span><span class=\"p\">(</span>    <span class=\"n\">img_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>    <span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"p\">):</span>    <span class=\"s\">\"\"\"    Takes a binary mask as input, @img_path, (just black + white) and returns     the boundary as a numpy array. Also saves it to the @output_path.     Taken from: https://medium.com/@rootaccess/how-to-detect-edges-of-a-mask-in-python-with-opencv-4bcdb3049682    \"\"\"</span>    <span class=\"n\">img_data</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">img_path</span><span class=\"p\">)</span>    <span class=\"n\">img_data</span> <span class=\"o\">=</span> <span class=\"n\">img_data</span> <span class=\"o\">&gt;</span> <span class=\"mi\">128</span>    <span class=\"n\">img_data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"n\">img_data</span><span class=\"p\">[:,</span> <span class=\"p\">:,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">double</span><span class=\"p\">)</span>    <span class=\"n\">gx</span><span class=\"p\">,</span> <span class=\"n\">gy</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">gradient</span><span class=\"p\">(</span><span class=\"n\">img_data</span><span class=\"p\">)</span>    <span class=\"n\">temp_edge</span> <span class=\"o\">=</span> <span class=\"n\">gy</span> <span class=\"o\">*</span> <span class=\"n\">gy</span> <span class=\"o\">+</span> <span class=\"n\">gx</span> <span class=\"o\">*</span> <span class=\"n\">gx</span>    <span class=\"n\">temp_edge</span><span class=\"p\">[</span><span class=\"n\">temp_edge</span> <span class=\"o\">!=</span> <span class=\"mf\">0.0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">255.0</span>    <span class=\"n\">temp_edge</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">asarray</span><span class=\"p\">(</span><span class=\"n\">temp_edge</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>        <span class=\"k\">if</span> <span class=\"n\">output_path</span> <span class=\"o\">!=</span> <span class=\"bp\">None</span><span class=\"p\">:</span>        <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"p\">,</span> <span class=\"n\">temp_edge</span><span class=\"p\">)</span>    <span class=\"k\">return</span> <span class=\"n\">temp_edge</span><span class=\"k\">def</span> <span class=\"nf\">overlayOriginalImage</span><span class=\"p\">(</span>    <span class=\"n\">img_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>    <span class=\"n\">msk_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>    <span class=\"n\">maskColor</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s\">'white'</span><span class=\"p\">,</span> <span class=\"c1\"># white, red, purple</span>    <span class=\"n\">output_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"bp\">None</span><span class=\"p\">,</span><span class=\"p\">):</span>    <span class=\"n\">msk_edge</span> <span class=\"o\">=</span> <span class=\"n\">justGetBoundarySingleImage</span><span class=\"p\">(</span><span class=\"n\">msk_path</span><span class=\"p\">)</span>    <span class=\"n\">og_image</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">img_path</span><span class=\"p\">)</span>    <span class=\"n\">msk_image</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">msk_path</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">IMREAD_COLOR</span><span class=\"p\">)</span>    <span class=\"c1\"># uncomment this line </span>    <span class=\"k\">if</span> <span class=\"n\">maskColor</span> <span class=\"o\">==</span> <span class=\"s\">'white'</span><span class=\"p\">:</span>        <span class=\"k\">pass</span>    <span class=\"k\">elif</span> <span class=\"n\">maskColor</span> <span class=\"o\">==</span> <span class=\"s\">'red'</span><span class=\"p\">:</span>        <span class=\"n\">msk_image</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">where</span><span class=\"p\">((</span><span class=\"n\">msk_image</span><span class=\"o\">==</span><span class=\"p\">[</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">]).</span><span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">]</span>    <span class=\"k\">elif</span> <span class=\"n\">maskColor</span> <span class=\"o\">==</span> <span class=\"s\">'green'</span><span class=\"p\">:</span>        <span class=\"n\">msk_image</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">where</span><span class=\"p\">((</span><span class=\"n\">msk_image</span><span class=\"o\">==</span><span class=\"p\">[</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">]).</span><span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>    <span class=\"k\">elif</span> <span class=\"n\">maskColor</span> <span class=\"o\">==</span> <span class=\"s\">'lighter_pink'</span><span class=\"p\">:</span>        <span class=\"n\">msk_image</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">where</span><span class=\"p\">((</span><span class=\"n\">msk_image</span><span class=\"o\">==</span><span class=\"p\">[</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">]).</span><span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]</span>    <span class=\"k\">elif</span> <span class=\"n\">maskColor</span> <span class=\"o\">==</span> <span class=\"s\">'pink'</span><span class=\"p\">:</span>        <span class=\"n\">msk_image</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">where</span><span class=\"p\">((</span><span class=\"n\">msk_image</span><span class=\"o\">==</span><span class=\"p\">[</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">]).</span><span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">]</span>    <span class=\"k\">elif</span> <span class=\"n\">maskColor</span> <span class=\"o\">==</span> <span class=\"s\">'grey'</span><span class=\"p\">:</span>        <span class=\"n\">msk_image</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">where</span><span class=\"p\">((</span><span class=\"n\">msk_image</span><span class=\"o\">==</span><span class=\"p\">[</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">]).</span><span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">axis</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">255</span><span class=\"p\">,</span><span class=\"mi\">165</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">]</span>    <span class=\"k\">else</span><span class=\"p\">:</span>        <span class=\"k\">raise</span> <span class=\"nb\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">'maskColor: </span><span class=\"si\">{</span><span class=\"n\">maskColor</span><span class=\"si\">}</span><span class=\"s\"> not available.'</span><span class=\"p\">)</span>    <span class=\"c1\"># this puts on the annotation or prediction with some transparency</span>    <span class=\"n\">merged_image</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">addWeighted</span><span class=\"p\">(</span><span class=\"n\">og_image</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"n\">msk_image</span><span class=\"p\">,</span><span class=\"mf\">0.2</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>            <span class=\"c1\"># now put on the border with no transparency / full opacity </span>    <span class=\"n\">merged_image</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">addWeighted</span><span class=\"p\">(</span><span class=\"n\">merged_image</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">msk_edge</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">COLOR_GRAY2RGB</span><span class=\"p\">),</span><span class=\"mf\">1.0</span><span class=\"p\">,</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>    <span class=\"k\">if</span> <span class=\"n\">output_path</span> <span class=\"o\">!=</span> <span class=\"bp\">None</span><span class=\"p\">:</span>        <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"p\">,</span> <span class=\"n\">merged_image</span><span class=\"p\">)</span><span class=\"k\">def</span> <span class=\"nf\">getSortedListOfFilePaths</span><span class=\"p\">(</span><span class=\"nb\">dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>    <span class=\"s\">\"\"\"    returns list of files in @dir from os.listdir + the whole path to that file    \"\"\"</span>    <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"nb\">dir</span><span class=\"p\">)</span>    <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">]</span>    <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">([</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">])</span>    <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">dir</span> <span class=\"o\">+</span> <span class=\"s\">'/'</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">'.png'</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">]</span>    <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"k\">def</span> <span class=\"nf\">getSortedListofFileNames</span><span class=\"p\">(</span><span class=\"nb\">dir</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>    <span class=\"s\">\"\"\"    returns list of files from os.listdir just sorted (inc order) assuming ALL     numbers     same as above but just doesnt return the total path to the file it just     returns the file name     \"\"\"</span>    <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"nb\">dir</span><span class=\"p\">)</span>    <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">]</span>    <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">([</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">])</span>    <span class=\"nb\">list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s\">'.png'</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">]</span>    <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"k\">def</span> <span class=\"nf\">generate3Plot</span><span class=\"p\">(</span>    <span class=\"n\">img_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s\">\"1_img.png\"</span><span class=\"p\">,</span>    <span class=\"n\">imgann_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s\">\"1_imgann.png\"</span><span class=\"p\">,</span>    <span class=\"n\">imgprd_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s\">\"1_img_prd.png\"</span><span class=\"p\">,</span>    <span class=\"n\">save_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s\">'1.png'</span><span class=\"p\">,</span><span class=\"p\">):</span>    <span class=\"s\">\"\"\"    taking the images, image+pred masks overlays, image+ann masks overlays,     generates a 3 plot of each and saves them each to a directory     \"\"\"</span>    <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">img_path</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">IMREAD_COLOR</span><span class=\"p\">);</span> <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">COLOR_BGR2RGB</span><span class=\"p\">)</span>    <span class=\"n\">ann</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">imgann_path</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">IMREAD_COLOR</span><span class=\"p\">);</span> <span class=\"n\">ann</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">ann</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">COLOR_BGR2RGB</span><span class=\"p\">)</span>    <span class=\"n\">prd</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">imgprd_path</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">IMREAD_COLOR</span><span class=\"p\">);</span> <span class=\"n\">prd</span> <span class=\"o\">=</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">cvtColor</span><span class=\"p\">(</span><span class=\"n\">prd</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"p\">.</span><span class=\"n\">COLOR_BGR2RGB</span><span class=\"p\">)</span>    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">style</span><span class=\"p\">.</span><span class=\"n\">use</span><span class=\"p\">(</span><span class=\"s\">'seaborn-white'</span><span class=\"p\">)</span>    <span class=\"c1\"># note super titles (Original, Annotaiton, Predicted) DO NOT WORK (they cut off)</span>    <span class=\"c1\"># will have to add these manually if we want them though I think its easy</span>    <span class=\"c1\"># to work around this </span>    <span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">axs</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"n\">nrows</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">ncols</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">))</span>    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">axs</span><span class=\"p\">.</span><span class=\"n\">flatten</span><span class=\"p\">()):</span>        <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">sca</span><span class=\"p\">(</span><span class=\"n\">ax</span><span class=\"p\">)</span>        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>            <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">img</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">cm</span><span class=\"p\">.</span><span class=\"n\">jet</span><span class=\"p\">)</span>            <span class=\"c1\"># plt.title('Original')</span>        <span class=\"k\">elif</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>            <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">ann</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">cm</span><span class=\"p\">.</span><span class=\"n\">jet</span><span class=\"p\">)</span>            <span class=\"c1\"># plt.title('Annotation')</span>        <span class=\"k\">elif</span> <span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>            <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">prd</span><span class=\"p\">,</span> <span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">cm</span><span class=\"p\">.</span><span class=\"n\">jet</span><span class=\"p\">)</span>            <span class=\"c1\"># plt.title('Predicted')</span>        <span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"n\">set_xticklabels</span><span class=\"p\">([])</span>        <span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"n\">set_yticklabels</span><span class=\"p\">([])</span>        <span class=\"n\">ax</span><span class=\"p\">.</span><span class=\"n\">set_aspect</span><span class=\"p\">(</span><span class=\"s\">'equal'</span><span class=\"p\">)</span>        <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">axis</span><span class=\"p\">(</span><span class=\"s\">'off'</span><span class=\"p\">)</span>    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">tight_layout</span><span class=\"p\">()</span>    <span class=\"n\">plt</span><span class=\"p\">.</span><span class=\"n\">savefig</span><span class=\"p\">(</span><span class=\"n\">save_name</span><span class=\"p\">)</span><span class=\"o\">@</span><span class=\"n\">click</span><span class=\"p\">.</span><span class=\"n\">command</span><span class=\"p\">(</span><span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s\">''</span><span class=\"p\">)</span><span class=\"o\">@</span><span class=\"n\">click</span><span class=\"p\">.</span><span class=\"n\">option</span><span class=\"p\">(</span><span class=\"s\">'--results_dir'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s\">'results/DataParallel/DataParallel_11'</span><span class=\"p\">)</span><span class=\"o\">@</span><span class=\"n\">click</span><span class=\"p\">.</span><span class=\"n\">option</span><span class=\"p\">(</span><span class=\"s\">'--checkpoint_pth'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s\">'results/DataParallel/DataParallel_11/current_checkpoints/DataParallel-218.pth'</span><span class=\"p\">)</span><span class=\"o\">@</span><span class=\"n\">click</span><span class=\"p\">.</span><span class=\"n\">option</span><span class=\"p\">(</span><span class=\"s\">'--dataset'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s\">'CVC_ClinicDB'</span><span class=\"p\">)</span><span class=\"o\">@</span><span class=\"n\">click</span><span class=\"p\">.</span><span class=\"n\">option</span><span class=\"p\">(</span><span class=\"s\">'--save_dir'</span><span class=\"p\">,</span> <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s\">'seg/data/totals/CVC_ClinicDB/'</span><span class=\"p\">)</span><span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span>    <span class=\"n\">model_name</span><span class=\"p\">,</span>    <span class=\"n\">dataset</span><span class=\"p\">,</span>    <span class=\"n\">results_dir</span><span class=\"p\">,</span>    <span class=\"n\">checkpoint_pth</span><span class=\"p\">,</span>    <span class=\"n\">save_dir</span><span class=\"p\">,</span><span class=\"p\">):</span>    <span class=\"n\">final_cfg</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">results_dir</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"s\">\"final_config.yml\"</span><span class=\"p\">,</span> <span class=\"s\">\"r\"</span><span class=\"p\">),</span>        <span class=\"n\">Loader</span><span class=\"o\">=</span><span class=\"n\">yaml</span><span class=\"p\">.</span><span class=\"n\">FullLoader</span><span class=\"p\">)</span>        <span class=\"n\">model_name</span> <span class=\"o\">=</span> <span class=\"n\">final_cfg</span><span class=\"p\">[</span><span class=\"s\">'model_name'</span><span class=\"p\">]</span>    <span class=\"n\">cnn_model_cfg</span> <span class=\"o\">=</span> <span class=\"n\">final_cfg</span><span class=\"p\">[</span><span class=\"s\">'cnn_model_cfg'</span><span class=\"p\">]</span>    <span class=\"n\">trans_model_cfg</span> <span class=\"o\">=</span> <span class=\"n\">final_cfg</span><span class=\"p\">[</span><span class=\"s\">'trans_model_cfg'</span><span class=\"p\">]</span>        <span class=\"k\">if</span> <span class=\"n\">model_name</span> <span class=\"o\">==</span> <span class=\"s\">'NewFusionNetwork'</span><span class=\"p\">:</span>        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">NewFusionNetwork</span><span class=\"p\">(</span>            <span class=\"n\">cnn_model_cfg</span><span class=\"p\">,</span>            <span class=\"n\">trans_model_cfg</span><span class=\"p\">,</span>            <span class=\"n\">cnn_pretrained</span><span class=\"o\">=</span><span class=\"bp\">False</span><span class=\"p\">,</span>            <span class=\"n\">with_fusion</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>        <span class=\"p\">).</span><span class=\"n\">cuda</span><span class=\"p\">()</span>    <span class=\"k\">else</span><span class=\"p\">:</span>        <span class=\"k\">raise</span> <span class=\"nb\">ValueError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">'invalid model: </span><span class=\"si\">{</span><span class=\"n\">model_name</span><span class=\"si\">}</span><span class=\"s\">'</span><span class=\"p\">)</span>    <span class=\"n\">num_gpu</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">cuda</span><span class=\"p\">.</span><span class=\"n\">device_count</span><span class=\"p\">()</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">'Number of GPUs: </span><span class=\"si\">{</span><span class=\"n\">num_gpu</span><span class=\"si\">}</span><span class=\"s\">'</span><span class=\"p\">)</span>    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">num_gpu</span><span class=\"p\">):</span>        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">'Device name: </span><span class=\"si\">{</span><span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">cuda</span><span class=\"p\">.</span><span class=\"n\">get_device_name</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\">'</span><span class=\"p\">)</span>    <span class=\"k\">if</span> <span class=\"n\">num_gpu</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">nn</span><span class=\"p\">.</span><span class=\"n\">DataParallel</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">)</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">'Resuming at path: </span><span class=\"si\">{</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">checkpoint_pth</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s\">'</span><span class=\"p\">)</span>    <span class=\"n\">checkpoint</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">checkpoint_pth</span><span class=\"p\">)</span>    <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"n\">load_state_dict</span><span class=\"p\">(</span><span class=\"n\">checkpoint</span><span class=\"p\">[</span><span class=\"s\">'model_state_dict'</span><span class=\"p\">])</span>    <span class=\"c1\"># model.load_state_dict(torch.load(checkpoint_pth))</span>    <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"n\">cuda</span><span class=\"p\">()</span>    <span class=\"n\">model</span><span class=\"p\">.</span><span class=\"nb\">eval</span><span class=\"p\">()</span>    <span class=\"n\">save_path</span> <span class=\"o\">=</span> <span class=\"n\">results_dir</span> <span class=\"o\">+</span> <span class=\"s\">'/tests/'</span> <span class=\"o\">+</span> <span class=\"n\">dataset</span> <span class=\"o\">+</span> <span class=\"s\">'/'</span>    <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">save_path</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>    <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">save_path</span> <span class=\"o\">+</span> <span class=\"s\">'/images/'</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>    <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">save_path</span> <span class=\"o\">+</span> <span class=\"s\">'/gts/'</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>    <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">save_path</span> <span class=\"o\">+</span> <span class=\"s\">'/outputs/'</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">'os.save_path: </span><span class=\"si\">{</span><span class=\"n\">save_path</span><span class=\"si\">}</span><span class=\"s\">'</span><span class=\"p\">)</span>    <span class=\"n\">test_loader</span> <span class=\"o\">=</span> <span class=\"n\">get_tDatasetImageTest</span><span class=\"p\">(</span>        <span class=\"n\">image_root</span> <span class=\"o\">=</span> <span class=\"n\">save_dir</span> <span class=\"o\">+</span> <span class=\"s\">\"/data_dataset_list_ordered.npy\"</span><span class=\"p\">,</span>        <span class=\"n\">gt_root</span> <span class=\"o\">=</span> <span class=\"n\">save_dir</span> <span class=\"o\">+</span> <span class=\"s\">\"/mask_dataset_list_ordered.npy\"</span><span class=\"p\">,</span>        <span class=\"n\">normalize_gt</span> <span class=\"o\">=</span> <span class=\"bp\">False</span><span class=\"p\">,</span>        <span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>        <span class=\"n\">normalization</span> <span class=\"o\">=</span> <span class=\"s\">\"vit\"</span><span class=\"p\">,</span>        <span class=\"n\">num_workers</span> <span class=\"o\">=</span> <span class=\"mi\">4</span><span class=\"p\">,</span>         <span class=\"n\">pin_memory</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">,</span>        <span class=\"n\">originalTxtFile</span><span class=\"o\">=</span> <span class=\"n\">save_dir</span> <span class=\"o\">+</span> <span class=\"s\">\"/dataset_list_ordered.txt\"</span><span class=\"p\">,</span> <span class=\"c1\"># if it's not in the save_dir you have to move it there</span>    <span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">progressbar</span><span class=\"p\">.</span><span class=\"n\">ProgressBar</span><span class=\"p\">(</span><span class=\"n\">max_value</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">test_loader</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">bar</span><span class=\"p\">:</span>        <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">image_gts</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">test_loader</span><span class=\"p\">):</span>            <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>            <span class=\"n\">bar</span><span class=\"p\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>                        <span class=\"n\">images</span><span class=\"p\">,</span> <span class=\"n\">gts</span><span class=\"p\">,</span> <span class=\"n\">og_text</span> <span class=\"o\">=</span> <span class=\"n\">image_gts</span>            <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">'og_text: </span><span class=\"si\">{</span><span class=\"n\">og_text</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s\">'</span><span class=\"p\">)</span>            <span class=\"n\">images</span> <span class=\"o\">=</span> <span class=\"n\">images</span><span class=\"p\">.</span><span class=\"n\">cuda</span><span class=\"p\">()</span>            <span class=\"n\">gts</span> <span class=\"o\">=</span> <span class=\"n\">gts</span><span class=\"p\">.</span><span class=\"n\">cuda</span><span class=\"p\">()</span>            <span class=\"k\">with</span> <span class=\"n\">torch</span><span class=\"p\">.</span><span class=\"n\">no_grad</span><span class=\"p\">():</span>                <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"p\">)</span>            <span class=\"c1\"># output = model(images)</span>            <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">sigmoid</span><span class=\"p\">().</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">cpu</span><span class=\"p\">().</span><span class=\"n\">numpy</span><span class=\"p\">().</span><span class=\"n\">squeeze</span><span class=\"p\">()</span>                        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">dataset</span> <span class=\"o\">+</span> <span class=\"s\">'_'</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>            <span class=\"n\">output_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s\">'_output.jpg'</span>            <span class=\"n\">image_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s\">'_image.jpg'</span>            <span class=\"n\">gt_name</span> <span class=\"o\">=</span> <span class=\"n\">name</span> <span class=\"o\">+</span> <span class=\"s\">'_gt.jpg'</span>            <span class=\"n\">images</span> <span class=\"o\">=</span> <span class=\"n\">images</span><span class=\"p\">.</span><span class=\"n\">cpu</span><span class=\"p\">().</span><span class=\"n\">numpy</span><span class=\"p\">().</span><span class=\"n\">squeeze</span><span class=\"p\">()</span>            <span class=\"n\">gts</span> <span class=\"o\">=</span> <span class=\"n\">gts</span><span class=\"p\">.</span><span class=\"n\">cpu</span><span class=\"p\">().</span><span class=\"n\">numpy</span><span class=\"p\">().</span><span class=\"n\">squeeze</span><span class=\"p\">().</span><span class=\"n\">squeeze</span><span class=\"p\">()</span>            <span class=\"n\">images</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"p\">.</span><span class=\"n\">transpose</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">0</span><span class=\"p\">))</span>            <span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">save_path</span> <span class=\"o\">+</span> <span class=\"s\">'/outputs/'</span> <span class=\"o\">+</span> <span class=\"n\">og_text</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">output</span><span class=\"p\">)</span>            <span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">save_path</span> <span class=\"o\">+</span> <span class=\"s\">'/images/'</span> <span class=\"o\">+</span> <span class=\"n\">og_text</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">images</span><span class=\"p\">)</span>            <span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">save_path</span> <span class=\"o\">+</span> <span class=\"s\">'/gts/'</span> <span class=\"o\">+</span> <span class=\"n\">og_text</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">gts</span><span class=\"p\">)</span>    <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">save_dir</span> <span class=\"o\">+</span> <span class=\"s\">'/img_ann/'</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>    <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">save_dir</span> <span class=\"o\">+</span> <span class=\"s\">'/img_prd/'</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>    <span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">save_dir</span> <span class=\"o\">+</span> <span class=\"s\">'/MultiPlot/'</span><span class=\"p\">,</span> <span class=\"n\">exist_ok</span><span class=\"o\">=</span><span class=\"bp\">True</span><span class=\"p\">)</span>    <span class=\"n\">img_names</span> <span class=\"o\">=</span> <span class=\"n\">getSortedListofFileNames</span><span class=\"p\">(</span><span class=\"n\">save_path</span> <span class=\"o\">+</span> <span class=\"s\">'/images/'</span><span class=\"p\">)</span> <span class=\"c1\"># all file names are the same {1, 2, ... x.png}</span>    <span class=\"n\">img_paths</span> <span class=\"o\">=</span> <span class=\"n\">getSortedListOfFilePaths</span><span class=\"p\">(</span><span class=\"n\">save_path</span> <span class=\"o\">+</span> <span class=\"s\">'/images/'</span><span class=\"p\">)</span>    <span class=\"n\">ann_paths</span> <span class=\"o\">=</span> <span class=\"n\">getSortedListOfFilePaths</span><span class=\"p\">(</span><span class=\"n\">save_path</span> <span class=\"o\">+</span> <span class=\"s\">'/gts/'</span><span class=\"p\">)</span>    <span class=\"n\">prd_paths</span> <span class=\"o\">=</span> <span class=\"n\">getSortedListOfFilePaths</span><span class=\"p\">(</span><span class=\"n\">save_path</span> <span class=\"o\">+</span> <span class=\"s\">'/outputs/'</span><span class=\"p\">)</span>    <span class=\"k\">with</span> <span class=\"n\">progressbar</span><span class=\"p\">.</span><span class=\"n\">ProgressBar</span><span class=\"p\">(</span><span class=\"n\">max_value</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">img_names</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">bar</span><span class=\"p\">:</span>        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">img_paths</span><span class=\"p\">)):</span>            <span class=\"n\">time</span><span class=\"p\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>            <span class=\"n\">bar</span><span class=\"p\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>            <span class=\"c1\"># do it for the img + anns</span>            <span class=\"n\">overlayOriginalImage</span><span class=\"p\">(</span>                <span class=\"n\">img_path</span><span class=\"o\">=</span><span class=\"n\">img_paths</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span>                <span class=\"n\">msk_path</span><span class=\"o\">=</span><span class=\"n\">ann_paths</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span>                <span class=\"n\">maskColor</span><span class=\"o\">=</span><span class=\"s\">'green'</span><span class=\"p\">,</span>                <span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"n\">save_dir</span> <span class=\"o\">+</span> <span class=\"s\">'/img_ann/'</span> <span class=\"o\">+</span> <span class=\"n\">img_names</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span>            <span class=\"p\">)</span>            <span class=\"c1\"># now for the img + prds</span>            <span class=\"n\">overlayOriginalImage</span><span class=\"p\">(</span>                <span class=\"n\">img_path</span><span class=\"o\">=</span><span class=\"n\">img_paths</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span>                <span class=\"n\">msk_path</span><span class=\"o\">=</span><span class=\"n\">prd_paths</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span>                <span class=\"n\">maskColor</span><span class=\"o\">=</span><span class=\"s\">'pink'</span><span class=\"p\">,</span>                <span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"n\">save_dir</span> <span class=\"o\">+</span> <span class=\"s\">'/img_prd/'</span> <span class=\"o\">+</span> <span class=\"n\">img_names</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span>            <span class=\"p\">)</span>            <span class=\"c1\"># now that we have img_anns + img_preds images saved, now MultiPlot</span>            <span class=\"n\">generate3Plot</span><span class=\"p\">(</span>                <span class=\"n\">img_path</span><span class=\"o\">=</span><span class=\"n\">img_paths</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span>                <span class=\"n\">imgann_path</span><span class=\"o\">=</span><span class=\"n\">save_dir</span> <span class=\"o\">+</span> <span class=\"s\">'/img_ann/'</span> <span class=\"o\">+</span> <span class=\"n\">img_names</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span>                <span class=\"n\">imgprd_path</span><span class=\"o\">=</span><span class=\"n\">save_dir</span> <span class=\"o\">+</span> <span class=\"s\">'/img_prd/'</span> <span class=\"o\">+</span> <span class=\"n\">img_names</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span>                <span class=\"n\">save_name</span><span class=\"o\">=</span><span class=\"n\">save_dir</span> <span class=\"o\">+</span> <span class=\"s\">'/MultiPlot/'</span> <span class=\"o\">+</span> <span class=\"n\">img_names</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>            <span class=\"p\">)</span>    <span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>    <span class=\"n\">main</span><span class=\"p\">()</span></code></pre></figure><p>You can then take the images from img_prd (which is the prediction overlayed theoriginal image) or the images from img_ann (which is the annotation overlayed theoriginal image) or the images from MultiPlot which are the original image alongwith the img_prd and img_ann and plug them into a gif creator.</p><p>For the CVC-ClinicDB polyp dataset, putting the images from MultiPlot would look like this:<br /><img src=\"/imgs/CVC_ColonDB_MultiPlot.gif\" alt=\"\" title=\"Input\" /></p><p>I used imgflip.com.</p><p>Thanks for reading!</p>",
            "url": "https://lewisj34.github.io//2022/10/01/videosegmasks",
            
            
            
            
            
            "date_published": "2022-10-01T21:30:52+02:00",
            "date_modified": "2022-10-01T21:30:52+02:00",
            
                "author":  {
                "name": "gesko",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://lewisj34.github.io//2021/01/02/convcudnn",
            "title": "Convolutions with cuDNN",
            "summary": null,
            "content_text": "This is just a brief tutorial in generating an edge detector with a conovlutionoperation using cuDNN. For those who aren’t familiar cuDNN is the deep learning primitive framework used as a backend for PyTorch and other higher-level mainstream deep learning frameworks.#include &lt;iostream&gt;#include &lt;cudnn.h&gt;#include &lt;cassert&gt;#include &lt;cstdlib&gt;/**************************************************************** FORWARD CONVOLUTION OPERATION ****************************************************************/// save an image to the working directory cv::Mat load_image(const char* image_path) {\tcv::Mat image = cv::imread(image_path, cv::IMREAD_COLOR);\timage.convertTo(image, CV_32FC3);\tcv::normalize(image, image, 0, 1, cv::NORM_MINMAX);\treturn image;}void show_image(cv::Mat img) {\tcv::imshow(\"Test image\", img); \tint k = cv::waitKey(0); // Wait for a keystroke in the window }void SAVE_IMAGE(const char* output_filename,    float* c_buffer_ptr,    int height,    int width) {    // create cv mat object from buffer and dimensions    cv::Mat image(height, width, CV_32FC3, c_buffer_ptr);    // convert negative values to 0     cv::threshold(image,        image,        /*threshold=*/0,        /*maxval=*/0,        cv::THRESH_TOZERO);    // normalize the image pixels for greater contrast and visibility in output img    cv::normalize(image, image, 0.0, 255.0, cv::NORM_MINMAX);        // convert image to appropriate bit depth (8) and number of channels (3)     image.convertTo(image, CV_8UC3);    // write to file    cv::imwrite(output_filename, image);    std::cerr &lt;&lt; \"Image output file directory: \" &lt;&lt; output_filename &lt;&lt; std::endl;}// macro checkCUDAERRORS: return the error code and which line // it was found on from the cudnnStatus_t object (if errors found)#define checkCUDAERRORS(expr)                                \\  {                                                          \\    cudnnStatus_t status = (expr);                     \\    if (status != CUDNN_STATUS_SUCCESS) {                    \\      std::cerr &lt;&lt; \"CUDNN ERROR ON LINE \" &lt;&lt; __LINE__ &lt;&lt; \": \"\\                &lt;&lt; cudnnGetErrorString(status) &lt;&lt; std::endl; \\      std::exit(EXIT_FAILURE);                               \\    }                                                        \\  }int main(int argc, const char* argv[]) {    // get GPU being used    int GPU = (argc &gt; 2) ? std::atoi(argv[2]) : 0;    std::cerr &lt;&lt; \"GPU: \" &lt;&lt; GPU &lt;&lt; std::endl;        // sigmoid activation function implementation     bool sigmoid_usage = (argc &gt; 3) ? std::atoi(argv[3]) : 0;    std::cerr &lt;&lt; \"With sigmoid: \" &lt;&lt; std::boolalpha &lt;&lt; sigmoid_usage &lt;&lt; std::endl;    // get image file and load into mat obj    cv::Mat image = load_image(\"crack.jpg\");    cudaSetDevice(1);    // get cuda context object     cudnnHandle_t CUDNN_CONTEXT;    cudnnCreate(&amp;CUDNN_CONTEXT);    // instantiate tensor descriptors/context objects     cudnnTensorDescriptor_t input_desc;    cudnnFilterDescriptor_t filter_desc;    cudnnConvolutionDescriptor_t convolution_desc;    cudnnTensorDescriptor_t output_descriptor;    // define tensor descs and check for errors     checkCUDAERRORS(cudnnCreateTensorDescriptor(&amp;input_desc));    checkCUDAERRORS(cudnnSetTensor4dDescriptor(input_desc,        /*format=*/CUDNN_TENSOR_NHWC,        /*dataType=*/CUDNN_DATA_FLOAT,        /*batch_size=*/1,        /*channels=*/3,        /*image_height=*/image.rows,        /*image_width=*/image.cols));    checkCUDAERRORS(cudnnCreateFilterDescriptor(&amp;filter_desc));    checkCUDAERRORS(cudnnSetFilter4dDescriptor(filter_desc,        /*dataType=*/CUDNN_DATA_FLOAT,        /*format=*/CUDNN_TENSOR_NCHW,        /*out_channels=*/3,        /*in_channels=*/3,        /*kernel_height=*/3,        /*kernel_width=*/3));    checkCUDAERRORS(cudnnCreateConvolutionDescriptor(&amp;convolution_desc));    checkCUDAERRORS(cudnnSetConvolution2dDescriptor(convolution_desc,        /*pad_height=*/1,        /*pad_width=*/1,        /*vertical_stride=*/1,        /*horizontal_stride=*/1,        /*dilation_height=*/1,        /*dilation_width=*/1,        /*mode=*/CUDNN_CROSS_CORRELATION,        /*computeType=*/CUDNN_DATA_FLOAT));    int batch_size{ 0 }, channels{ 0 }, height{ 0 }, width{ 0 };    checkCUDAERRORS(cudnnGetConvolution2dForwardOutputDim(convolution_desc,        input_desc,        filter_desc,        &amp;batch_size,        &amp;channels,        &amp;height,        &amp;width));    std::cerr &lt;&lt; \"Image dimensions of Output Image: \"        &lt;&lt; height &lt;&lt; \" x \" &lt;&lt; width &lt;&lt; \" x \" &lt;&lt; channels        &lt;&lt; std::endl;    checkCUDAERRORS(cudnnCreateTensorDescriptor(&amp;output_descriptor));    checkCUDAERRORS(cudnnSetTensor4dDescriptor(output_descriptor,        /*order of params=*/CUDNN_TENSOR_NHWC,        /*type of data=*/CUDNN_DATA_FLOAT,        /*size of batch=*/1,        /*num channels=*/3,        /*img height=*/image.rows,        /*img width=*/image.cols));    int requested_algo_count = 0, returned_algo_count = 0;    cudnnConvolutionFwdAlgoPerf_t conv_fwd_results[100];    cudnnConvolutionFwdAlgo_t algorithm_conv;    checkCUDAERRORS(        cudnnGetConvolutionForwardAlgorithm_v7(CUDNN_CONTEXT,            input_desc,            filter_desc,            convolution_desc,            output_descriptor,            requested_algo_count, // (cudnnConvolutionFwdPreference_t)forward_algo,            &amp;returned_algo_count, // workspace_size_specify,            conv_fwd_results));    size_t workspace_bytes{ 0 };    checkCUDAERRORS(cudnnGetConvolutionForwardWorkspaceSize(CUDNN_CONTEXT,        input_desc,        filter_desc,        convolution_desc,        output_descriptor,        algorithm_conv,        &amp;workspace_bytes));    assert(workspace_bytes &gt; 0);    void* d_workspace{ nullptr };    cudaMalloc(&amp;d_workspace, workspace_bytes);    int image_bytes = batch_size * channels * height * width * sizeof(float);    float* d_input{ nullptr };    cudaMalloc(&amp;d_input, image_bytes);    cudaMemcpy(d_input, image.ptr&lt;float&gt;(0), image_bytes, cudaMemcpyHostToDevice);    float* d_output{ nullptr };    cudaMalloc(&amp;d_output, image_bytes);    cudaMemset(d_output, 0, image_bytes);    const float kernel_template[3][3] = {      {1, 1, 1},      {1, -8, 1},      {1, 1, 1}    };    float h_kernel[3][3][3][3];    for (int kernel = 0; kernel &lt; 3; ++kernel) {        for (int channel = 0; channel &lt; 3; ++channel) {            for (int row = 0; row &lt; 3; ++row) {                for (int column = 0; column &lt; 3; ++column) {                    h_kernel[kernel][channel][row][column] = kernel_template[row][column];                }            }        }    }    float* d_kernel{ nullptr };    cudaMalloc(&amp;d_kernel, sizeof(h_kernel));    cudaMemcpy(d_kernel, h_kernel, sizeof(h_kernel), cudaMemcpyHostToDevice);    const float alpha = 1.0f, beta = 0.0f;    // do a forward propagation     checkCUDAERRORS(cudnnConvolutionForward(CUDNN_CONTEXT,        &amp;alpha,        input_desc,        d_input,        filter_desc,        d_kernel,        convolution_desc,        algorithm_conv,        d_workspace,        workspace_bytes,        &amp;beta,        output_descriptor,        d_output));    // apply activation function if sigmoid_usage = true     if (sigmoid_usage) {        cudnnActivationDescriptor_t activation_desc;        checkCUDAERRORS(cudnnCreateActivationDescriptor(&amp;activation_desc));        checkCUDAERRORS(cudnnSetActivationDescriptor(activation_desc,            CUDNN_ACTIVATION_SIGMOID,            CUDNN_PROPAGATE_NAN,            /*relu_coef=*/0));        checkCUDAERRORS(cudnnActivationForward(CUDNN_CONTEXT,            activation_desc,            &amp;alpha,            output_descriptor,            d_output,            &amp;beta,            output_descriptor,            d_output));        cudnnDestroyActivationDescriptor(activation_desc);    }    float* h_output = new float[image_bytes];    cudaMemcpy(h_output, d_output, image_bytes, cudaMemcpyDeviceToHost);    SAVE_IMAGE(\"crack_out.png\", h_output, height, width);    delete[] h_output;    cudaFree(d_kernel);    cudaFree(d_input);    cudaFree(d_output);    cudaFree(d_workspace);    cudnnDestroyTensorDescriptor(input_desc);    cudnnDestroyTensorDescriptor(output_descriptor);    cudnnDestroyFilterDescriptor(filter_desc);    cudnnDestroyConvolutionDescriptor(convolution_desc);    cudnnDestroy(CUDNN_CONTEXT);    std::cout &lt;&lt; \"Done!\\n\"; }/*Sourceshttps://github.com/BVLC/caffe/blob/master/src/caffe/layers/cudnn_conv_layer.cpphttp://www.goldsborough.me/cuda/ml/cudnn/c++/2017/10/01/14-37-23-convolutions_with_cudnn/*/If you’ve run this correctly your input image, crack.png, should look like this:And your edge detected crack, crack_out.png, should look like this:",
            "content_html": "<p>This is just a brief tutorial in generating an edge detector with a conovlutionoperation using cuDNN. For those who aren’t familiar cuDNN is the deep learning primitive framework used as a backend for PyTorch and other higher-level mainstream deep learning frameworks.</p><figure class=\"highlight\"><pre><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"cp\">#include &lt;iostream&gt;#include &lt;cudnn.h&gt;#include &lt;cassert&gt;#include &lt;cstdlib&gt;</span><span class=\"cm\">/**************************************************************** FORWARD CONVOLUTION OPERATION ****************************************************************/</span><span class=\"c1\">// save an image to the working directory </span><span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">Mat</span> <span class=\"nf\">load_image</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">image_path</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">Mat</span> <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">imread</span><span class=\"p\">(</span><span class=\"n\">image_path</span><span class=\"p\">,</span> <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">IMREAD_COLOR</span><span class=\"p\">);</span>\t<span class=\"n\">image</span><span class=\"p\">.</span><span class=\"n\">convertTo</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">CV_32FC3</span><span class=\"p\">);</span>\t<span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">normalize</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">NORM_MINMAX</span><span class=\"p\">);</span>\t<span class=\"k\">return</span> <span class=\"n\">image</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"kt\">void</span> <span class=\"nf\">show_image</span><span class=\"p\">(</span><span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">Mat</span> <span class=\"n\">img</span><span class=\"p\">)</span> <span class=\"p\">{</span>\t<span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s\">\"Test image\"</span><span class=\"p\">,</span> <span class=\"n\">img</span><span class=\"p\">);</span> \t<span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">waitKey</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span> <span class=\"c1\">// Wait for a keystroke in the window </span><span class=\"p\">}</span><span class=\"kt\">void</span> <span class=\"nf\">SAVE_IMAGE</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">output_filename</span><span class=\"p\">,</span>    <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">c_buffer_ptr</span><span class=\"p\">,</span>    <span class=\"kt\">int</span> <span class=\"n\">height</span><span class=\"p\">,</span>    <span class=\"kt\">int</span> <span class=\"n\">width</span><span class=\"p\">)</span> <span class=\"p\">{</span>    <span class=\"c1\">// create cv mat object from buffer and dimensions</span>    <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">Mat</span> <span class=\"n\">image</span><span class=\"p\">(</span><span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">CV_32FC3</span><span class=\"p\">,</span> <span class=\"n\">c_buffer_ptr</span><span class=\"p\">);</span>    <span class=\"c1\">// convert negative values to 0 </span>    <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">threshold</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span>        <span class=\"n\">image</span><span class=\"p\">,</span>        <span class=\"cm\">/*threshold=*/</span><span class=\"mi\">0</span><span class=\"p\">,</span>        <span class=\"cm\">/*maxval=*/</span><span class=\"mi\">0</span><span class=\"p\">,</span>        <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">THRESH_TOZERO</span><span class=\"p\">);</span>    <span class=\"c1\">// normalize the image pixels for greater contrast and visibility in output img</span>    <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">normalize</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">255.0</span><span class=\"p\">,</span> <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">NORM_MINMAX</span><span class=\"p\">);</span>        <span class=\"c1\">// convert image to appropriate bit depth (8) and number of channels (3) </span>    <span class=\"n\">image</span><span class=\"p\">.</span><span class=\"n\">convertTo</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">CV_8UC3</span><span class=\"p\">);</span>    <span class=\"c1\">// write to file</span>    <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">imwrite</span><span class=\"p\">(</span><span class=\"n\">output_filename</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"p\">);</span>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Image output file directory: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">output_filename</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span><span class=\"p\">}</span><span class=\"c1\">// macro checkCUDAERRORS: return the error code and which line </span><span class=\"c1\">// it was found on from the cudnnStatus_t object (if errors found)</span><span class=\"cp\">#define checkCUDAERRORS(expr)                                \\  {                                                          \\    cudnnStatus_t status = (expr);                     \\    if (status != CUDNN_STATUS_SUCCESS) {                    \\      std::cerr &lt;&lt; \"CUDNN ERROR ON LINE \" &lt;&lt; __LINE__ &lt;&lt; \": \"\\                &lt;&lt; cudnnGetErrorString(status) &lt;&lt; std::endl; \\      std::exit(EXIT_FAILURE);                               \\    }                                                        \\  }</span><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"n\">argv</span><span class=\"p\">[])</span> <span class=\"p\">{</span>    <span class=\"c1\">// get GPU being used</span>    <span class=\"kt\">int</span> <span class=\"n\">GPU</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">argc</span> <span class=\"o\">&gt;</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"GPU: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">GPU</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>        <span class=\"c1\">// sigmoid activation function implementation </span>    <span class=\"kt\">bool</span> <span class=\"n\">sigmoid_usage</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">argc</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">?</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">atoi</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">:</span> <span class=\"mi\">0</span><span class=\"p\">;</span>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"With sigmoid: \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">boolalpha</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">sigmoid_usage</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>    <span class=\"c1\">// get image file and load into mat obj</span>    <span class=\"n\">cv</span><span class=\"o\">::</span><span class=\"n\">Mat</span> <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">load_image</span><span class=\"p\">(</span><span class=\"s\">\"crack.jpg\"</span><span class=\"p\">);</span>    <span class=\"n\">cudaSetDevice</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">);</span>    <span class=\"c1\">// get cuda context object </span>    <span class=\"n\">cudnnHandle_t</span> <span class=\"n\">CUDNN_CONTEXT</span><span class=\"p\">;</span>    <span class=\"n\">cudnnCreate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">CUDNN_CONTEXT</span><span class=\"p\">);</span>    <span class=\"c1\">// instantiate tensor descriptors/context objects </span>    <span class=\"n\">cudnnTensorDescriptor_t</span> <span class=\"n\">input_desc</span><span class=\"p\">;</span>    <span class=\"n\">cudnnFilterDescriptor_t</span> <span class=\"n\">filter_desc</span><span class=\"p\">;</span>    <span class=\"n\">cudnnConvolutionDescriptor_t</span> <span class=\"n\">convolution_desc</span><span class=\"p\">;</span>    <span class=\"n\">cudnnTensorDescriptor_t</span> <span class=\"n\">output_descriptor</span><span class=\"p\">;</span>    <span class=\"c1\">// define tensor descs and check for errors </span>    <span class=\"n\">checkCUDAERRORS</span><span class=\"p\">(</span><span class=\"n\">cudnnCreateTensorDescriptor</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">input_desc</span><span class=\"p\">));</span>    <span class=\"n\">checkCUDAERRORS</span><span class=\"p\">(</span><span class=\"n\">cudnnSetTensor4dDescriptor</span><span class=\"p\">(</span><span class=\"n\">input_desc</span><span class=\"p\">,</span>        <span class=\"cm\">/*format=*/</span><span class=\"n\">CUDNN_TENSOR_NHWC</span><span class=\"p\">,</span>        <span class=\"cm\">/*dataType=*/</span><span class=\"n\">CUDNN_DATA_FLOAT</span><span class=\"p\">,</span>        <span class=\"cm\">/*batch_size=*/</span><span class=\"mi\">1</span><span class=\"p\">,</span>        <span class=\"cm\">/*channels=*/</span><span class=\"mi\">3</span><span class=\"p\">,</span>        <span class=\"cm\">/*image_height=*/</span><span class=\"n\">image</span><span class=\"p\">.</span><span class=\"n\">rows</span><span class=\"p\">,</span>        <span class=\"cm\">/*image_width=*/</span><span class=\"n\">image</span><span class=\"p\">.</span><span class=\"n\">cols</span><span class=\"p\">));</span>    <span class=\"n\">checkCUDAERRORS</span><span class=\"p\">(</span><span class=\"n\">cudnnCreateFilterDescriptor</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">filter_desc</span><span class=\"p\">));</span>    <span class=\"n\">checkCUDAERRORS</span><span class=\"p\">(</span><span class=\"n\">cudnnSetFilter4dDescriptor</span><span class=\"p\">(</span><span class=\"n\">filter_desc</span><span class=\"p\">,</span>        <span class=\"cm\">/*dataType=*/</span><span class=\"n\">CUDNN_DATA_FLOAT</span><span class=\"p\">,</span>        <span class=\"cm\">/*format=*/</span><span class=\"n\">CUDNN_TENSOR_NCHW</span><span class=\"p\">,</span>        <span class=\"cm\">/*out_channels=*/</span><span class=\"mi\">3</span><span class=\"p\">,</span>        <span class=\"cm\">/*in_channels=*/</span><span class=\"mi\">3</span><span class=\"p\">,</span>        <span class=\"cm\">/*kernel_height=*/</span><span class=\"mi\">3</span><span class=\"p\">,</span>        <span class=\"cm\">/*kernel_width=*/</span><span class=\"mi\">3</span><span class=\"p\">));</span>    <span class=\"n\">checkCUDAERRORS</span><span class=\"p\">(</span><span class=\"n\">cudnnCreateConvolutionDescriptor</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">convolution_desc</span><span class=\"p\">));</span>    <span class=\"n\">checkCUDAERRORS</span><span class=\"p\">(</span><span class=\"n\">cudnnSetConvolution2dDescriptor</span><span class=\"p\">(</span><span class=\"n\">convolution_desc</span><span class=\"p\">,</span>        <span class=\"cm\">/*pad_height=*/</span><span class=\"mi\">1</span><span class=\"p\">,</span>        <span class=\"cm\">/*pad_width=*/</span><span class=\"mi\">1</span><span class=\"p\">,</span>        <span class=\"cm\">/*vertical_stride=*/</span><span class=\"mi\">1</span><span class=\"p\">,</span>        <span class=\"cm\">/*horizontal_stride=*/</span><span class=\"mi\">1</span><span class=\"p\">,</span>        <span class=\"cm\">/*dilation_height=*/</span><span class=\"mi\">1</span><span class=\"p\">,</span>        <span class=\"cm\">/*dilation_width=*/</span><span class=\"mi\">1</span><span class=\"p\">,</span>        <span class=\"cm\">/*mode=*/</span><span class=\"n\">CUDNN_CROSS_CORRELATION</span><span class=\"p\">,</span>        <span class=\"cm\">/*computeType=*/</span><span class=\"n\">CUDNN_DATA_FLOAT</span><span class=\"p\">));</span>    <span class=\"kt\">int</span> <span class=\"n\">batch_size</span><span class=\"p\">{</span> <span class=\"mi\">0</span> <span class=\"p\">},</span> <span class=\"n\">channels</span><span class=\"p\">{</span> <span class=\"mi\">0</span> <span class=\"p\">},</span> <span class=\"n\">height</span><span class=\"p\">{</span> <span class=\"mi\">0</span> <span class=\"p\">},</span> <span class=\"n\">width</span><span class=\"p\">{</span> <span class=\"mi\">0</span> <span class=\"p\">};</span>    <span class=\"n\">checkCUDAERRORS</span><span class=\"p\">(</span><span class=\"n\">cudnnGetConvolution2dForwardOutputDim</span><span class=\"p\">(</span><span class=\"n\">convolution_desc</span><span class=\"p\">,</span>        <span class=\"n\">input_desc</span><span class=\"p\">,</span>        <span class=\"n\">filter_desc</span><span class=\"p\">,</span>        <span class=\"o\">&amp;</span><span class=\"n\">batch_size</span><span class=\"p\">,</span>        <span class=\"o\">&amp;</span><span class=\"n\">channels</span><span class=\"p\">,</span>        <span class=\"o\">&amp;</span><span class=\"n\">height</span><span class=\"p\">,</span>        <span class=\"o\">&amp;</span><span class=\"n\">width</span><span class=\"p\">));</span>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cerr</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Image dimensions of Output Image: \"</span>        <span class=\"o\">&lt;&lt;</span> <span class=\"n\">height</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" x \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">width</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\" x \"</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">channels</span>        <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>    <span class=\"n\">checkCUDAERRORS</span><span class=\"p\">(</span><span class=\"n\">cudnnCreateTensorDescriptor</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">output_descriptor</span><span class=\"p\">));</span>    <span class=\"n\">checkCUDAERRORS</span><span class=\"p\">(</span><span class=\"n\">cudnnSetTensor4dDescriptor</span><span class=\"p\">(</span><span class=\"n\">output_descriptor</span><span class=\"p\">,</span>        <span class=\"cm\">/*order of params=*/</span><span class=\"n\">CUDNN_TENSOR_NHWC</span><span class=\"p\">,</span>        <span class=\"cm\">/*type of data=*/</span><span class=\"n\">CUDNN_DATA_FLOAT</span><span class=\"p\">,</span>        <span class=\"cm\">/*size of batch=*/</span><span class=\"mi\">1</span><span class=\"p\">,</span>        <span class=\"cm\">/*num channels=*/</span><span class=\"mi\">3</span><span class=\"p\">,</span>        <span class=\"cm\">/*img height=*/</span><span class=\"n\">image</span><span class=\"p\">.</span><span class=\"n\">rows</span><span class=\"p\">,</span>        <span class=\"cm\">/*img width=*/</span><span class=\"n\">image</span><span class=\"p\">.</span><span class=\"n\">cols</span><span class=\"p\">));</span>    <span class=\"kt\">int</span> <span class=\"n\">requested_algo_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">returned_algo_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>    <span class=\"n\">cudnnConvolutionFwdAlgoPerf_t</span> <span class=\"n\">conv_fwd_results</span><span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">];</span>    <span class=\"n\">cudnnConvolutionFwdAlgo_t</span> <span class=\"n\">algorithm_conv</span><span class=\"p\">;</span>    <span class=\"n\">checkCUDAERRORS</span><span class=\"p\">(</span>        <span class=\"n\">cudnnGetConvolutionForwardAlgorithm_v7</span><span class=\"p\">(</span><span class=\"n\">CUDNN_CONTEXT</span><span class=\"p\">,</span>            <span class=\"n\">input_desc</span><span class=\"p\">,</span>            <span class=\"n\">filter_desc</span><span class=\"p\">,</span>            <span class=\"n\">convolution_desc</span><span class=\"p\">,</span>            <span class=\"n\">output_descriptor</span><span class=\"p\">,</span>            <span class=\"n\">requested_algo_count</span><span class=\"p\">,</span> <span class=\"c1\">// (cudnnConvolutionFwdPreference_t)forward_algo,</span>            <span class=\"o\">&amp;</span><span class=\"n\">returned_algo_count</span><span class=\"p\">,</span> <span class=\"c1\">// workspace_size_specify,</span>            <span class=\"n\">conv_fwd_results</span><span class=\"p\">));</span>    <span class=\"kt\">size_t</span> <span class=\"n\">workspace_bytes</span><span class=\"p\">{</span> <span class=\"mi\">0</span> <span class=\"p\">};</span>    <span class=\"n\">checkCUDAERRORS</span><span class=\"p\">(</span><span class=\"n\">cudnnGetConvolutionForwardWorkspaceSize</span><span class=\"p\">(</span><span class=\"n\">CUDNN_CONTEXT</span><span class=\"p\">,</span>        <span class=\"n\">input_desc</span><span class=\"p\">,</span>        <span class=\"n\">filter_desc</span><span class=\"p\">,</span>        <span class=\"n\">convolution_desc</span><span class=\"p\">,</span>        <span class=\"n\">output_descriptor</span><span class=\"p\">,</span>        <span class=\"n\">algorithm_conv</span><span class=\"p\">,</span>        <span class=\"o\">&amp;</span><span class=\"n\">workspace_bytes</span><span class=\"p\">));</span>    <span class=\"n\">assert</span><span class=\"p\">(</span><span class=\"n\">workspace_bytes</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">);</span>    <span class=\"kt\">void</span><span class=\"o\">*</span> <span class=\"n\">d_workspace</span><span class=\"p\">{</span> <span class=\"nb\">nullptr</span> <span class=\"p\">};</span>    <span class=\"n\">cudaMalloc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">d_workspace</span><span class=\"p\">,</span> <span class=\"n\">workspace_bytes</span><span class=\"p\">);</span>    <span class=\"kt\">int</span> <span class=\"n\">image_bytes</span> <span class=\"o\">=</span> <span class=\"n\">batch_size</span> <span class=\"o\">*</span> <span class=\"n\">channels</span> <span class=\"o\">*</span> <span class=\"n\">height</span> <span class=\"o\">*</span> <span class=\"n\">width</span> <span class=\"o\">*</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"kt\">float</span><span class=\"p\">);</span>    <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">d_input</span><span class=\"p\">{</span> <span class=\"nb\">nullptr</span> <span class=\"p\">};</span>    <span class=\"n\">cudaMalloc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">d_input</span><span class=\"p\">,</span> <span class=\"n\">image_bytes</span><span class=\"p\">);</span>    <span class=\"n\">cudaMemcpy</span><span class=\"p\">(</span><span class=\"n\">d_input</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"o\">&lt;</span><span class=\"kt\">float</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">image_bytes</span><span class=\"p\">,</span> <span class=\"n\">cudaMemcpyHostToDevice</span><span class=\"p\">);</span>    <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">d_output</span><span class=\"p\">{</span> <span class=\"nb\">nullptr</span> <span class=\"p\">};</span>    <span class=\"n\">cudaMalloc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">d_output</span><span class=\"p\">,</span> <span class=\"n\">image_bytes</span><span class=\"p\">);</span>    <span class=\"n\">cudaMemset</span><span class=\"p\">(</span><span class=\"n\">d_output</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">image_bytes</span><span class=\"p\">);</span>    <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">kernel_template</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>      <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span>      <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">},</span>      <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">}</span>    <span class=\"p\">};</span>    <span class=\"kt\">float</span> <span class=\"n\">h_kernel</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">][</span><span class=\"mi\">3</span><span class=\"p\">];</span>    <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">kernel</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">kernel</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">kernel</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">channel</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">channel</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">channel</span><span class=\"p\">)</span> <span class=\"p\">{</span>            <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">row</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">row</span><span class=\"p\">)</span> <span class=\"p\">{</span>                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">column</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">column</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">column</span><span class=\"p\">)</span> <span class=\"p\">{</span>                    <span class=\"n\">h_kernel</span><span class=\"p\">[</span><span class=\"n\">kernel</span><span class=\"p\">][</span><span class=\"n\">channel</span><span class=\"p\">][</span><span class=\"n\">row</span><span class=\"p\">][</span><span class=\"n\">column</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kernel_template</span><span class=\"p\">[</span><span class=\"n\">row</span><span class=\"p\">][</span><span class=\"n\">column</span><span class=\"p\">];</span>                <span class=\"p\">}</span>            <span class=\"p\">}</span>        <span class=\"p\">}</span>    <span class=\"p\">}</span>    <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">d_kernel</span><span class=\"p\">{</span> <span class=\"nb\">nullptr</span> <span class=\"p\">};</span>    <span class=\"n\">cudaMalloc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">d_kernel</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">h_kernel</span><span class=\"p\">));</span>    <span class=\"n\">cudaMemcpy</span><span class=\"p\">(</span><span class=\"n\">d_kernel</span><span class=\"p\">,</span> <span class=\"n\">h_kernel</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">h_kernel</span><span class=\"p\">),</span> <span class=\"n\">cudaMemcpyHostToDevice</span><span class=\"p\">);</span>    <span class=\"k\">const</span> <span class=\"kt\">float</span> <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">beta</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span><span class=\"n\">f</span><span class=\"p\">;</span>    <span class=\"c1\">// do a forward propagation </span>    <span class=\"n\">checkCUDAERRORS</span><span class=\"p\">(</span><span class=\"n\">cudnnConvolutionForward</span><span class=\"p\">(</span><span class=\"n\">CUDNN_CONTEXT</span><span class=\"p\">,</span>        <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span>        <span class=\"n\">input_desc</span><span class=\"p\">,</span>        <span class=\"n\">d_input</span><span class=\"p\">,</span>        <span class=\"n\">filter_desc</span><span class=\"p\">,</span>        <span class=\"n\">d_kernel</span><span class=\"p\">,</span>        <span class=\"n\">convolution_desc</span><span class=\"p\">,</span>        <span class=\"n\">algorithm_conv</span><span class=\"p\">,</span>        <span class=\"n\">d_workspace</span><span class=\"p\">,</span>        <span class=\"n\">workspace_bytes</span><span class=\"p\">,</span>        <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span>        <span class=\"n\">output_descriptor</span><span class=\"p\">,</span>        <span class=\"n\">d_output</span><span class=\"p\">));</span>    <span class=\"c1\">// apply activation function if sigmoid_usage = true </span>    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">sigmoid_usage</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"n\">cudnnActivationDescriptor_t</span> <span class=\"n\">activation_desc</span><span class=\"p\">;</span>        <span class=\"n\">checkCUDAERRORS</span><span class=\"p\">(</span><span class=\"n\">cudnnCreateActivationDescriptor</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">activation_desc</span><span class=\"p\">));</span>        <span class=\"n\">checkCUDAERRORS</span><span class=\"p\">(</span><span class=\"n\">cudnnSetActivationDescriptor</span><span class=\"p\">(</span><span class=\"n\">activation_desc</span><span class=\"p\">,</span>            <span class=\"n\">CUDNN_ACTIVATION_SIGMOID</span><span class=\"p\">,</span>            <span class=\"n\">CUDNN_PROPAGATE_NAN</span><span class=\"p\">,</span>            <span class=\"cm\">/*relu_coef=*/</span><span class=\"mi\">0</span><span class=\"p\">));</span>        <span class=\"n\">checkCUDAERRORS</span><span class=\"p\">(</span><span class=\"n\">cudnnActivationForward</span><span class=\"p\">(</span><span class=\"n\">CUDNN_CONTEXT</span><span class=\"p\">,</span>            <span class=\"n\">activation_desc</span><span class=\"p\">,</span>            <span class=\"o\">&amp;</span><span class=\"n\">alpha</span><span class=\"p\">,</span>            <span class=\"n\">output_descriptor</span><span class=\"p\">,</span>            <span class=\"n\">d_output</span><span class=\"p\">,</span>            <span class=\"o\">&amp;</span><span class=\"n\">beta</span><span class=\"p\">,</span>            <span class=\"n\">output_descriptor</span><span class=\"p\">,</span>            <span class=\"n\">d_output</span><span class=\"p\">));</span>        <span class=\"n\">cudnnDestroyActivationDescriptor</span><span class=\"p\">(</span><span class=\"n\">activation_desc</span><span class=\"p\">);</span>    <span class=\"p\">}</span>    <span class=\"kt\">float</span><span class=\"o\">*</span> <span class=\"n\">h_output</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"kt\">float</span><span class=\"p\">[</span><span class=\"n\">image_bytes</span><span class=\"p\">];</span>    <span class=\"n\">cudaMemcpy</span><span class=\"p\">(</span><span class=\"n\">h_output</span><span class=\"p\">,</span> <span class=\"n\">d_output</span><span class=\"p\">,</span> <span class=\"n\">image_bytes</span><span class=\"p\">,</span> <span class=\"n\">cudaMemcpyDeviceToHost</span><span class=\"p\">);</span>    <span class=\"n\">SAVE_IMAGE</span><span class=\"p\">(</span><span class=\"s\">\"crack_out.png\"</span><span class=\"p\">,</span> <span class=\"n\">h_output</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">);</span>    <span class=\"k\">delete</span><span class=\"p\">[]</span> <span class=\"n\">h_output</span><span class=\"p\">;</span>    <span class=\"n\">cudaFree</span><span class=\"p\">(</span><span class=\"n\">d_kernel</span><span class=\"p\">);</span>    <span class=\"n\">cudaFree</span><span class=\"p\">(</span><span class=\"n\">d_input</span><span class=\"p\">);</span>    <span class=\"n\">cudaFree</span><span class=\"p\">(</span><span class=\"n\">d_output</span><span class=\"p\">);</span>    <span class=\"n\">cudaFree</span><span class=\"p\">(</span><span class=\"n\">d_workspace</span><span class=\"p\">);</span>    <span class=\"n\">cudnnDestroyTensorDescriptor</span><span class=\"p\">(</span><span class=\"n\">input_desc</span><span class=\"p\">);</span>    <span class=\"n\">cudnnDestroyTensorDescriptor</span><span class=\"p\">(</span><span class=\"n\">output_descriptor</span><span class=\"p\">);</span>    <span class=\"n\">cudnnDestroyFilterDescriptor</span><span class=\"p\">(</span><span class=\"n\">filter_desc</span><span class=\"p\">);</span>    <span class=\"n\">cudnnDestroyConvolutionDescriptor</span><span class=\"p\">(</span><span class=\"n\">convolution_desc</span><span class=\"p\">);</span>    <span class=\"n\">cudnnDestroy</span><span class=\"p\">(</span><span class=\"n\">CUDNN_CONTEXT</span><span class=\"p\">);</span>    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">\"Done!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span> <span class=\"p\">}</span><span class=\"cm\">/*Sourceshttps://github.com/BVLC/caffe/blob/master/src/caffe/layers/cudnn_conv_layer.cpphttp://www.goldsborough.me/cuda/ml/cudnn/c++/2017/10/01/14-37-23-convolutions_with_cudnn/*/</span></code></pre></figure><p>If you’ve run this correctly your input image, <code class=\"language-plaintext highlighter-rouge\">crack.png</code>, should look like this:<img src=\"/imgs/crack.jpg\" alt=\"\" title=\"Input\" /><!-- <img src=\"../imgs/crack.jpg\" alt=\"MarineGEO circle logo\" style=\"height: 100px; width:100px;\"/> --></p><p>And your edge detected crack, <code class=\"language-plaintext highlighter-rouge\">crack_out.png</code>, should look like this:<img src=\"/imgs/crack_out.png\" alt=\"Output\" /><!-- <img src=\"../imgs/crack_out.png\" alt=\"MarineGEO circle logo\"/> --></p>",
            "url": "https://lewisj34.github.io//2021/01/02/convcudnn",
            
            
            
            
            
            "date_published": "2021-01-02T20:29:52+01:00",
            "date_modified": "2021-01-02T20:29:52+01:00",
            
                "author":  {
                "name": "gesko",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://lewisj34.github.io//2021/01/02/genstiffmatrix2dframe",
            "title": "Generalized Stiffness Matrix for 2D Frame Structures in C++",
            "summary": null,
            "content_text": " Basic IntroductionThis is a short and sweet C++ framework to generate a global stiffness matrix for any 2D frame structure. Linear algebra library, Armadillo, was used for matrix generation. Basic user input looks like this in int main()// instantiate frame object, f frame f; // element 1 f.add_element(new element(    2e8,        // E    0.00048,    // I     0.075,      // A    5,          // L    7880,       // rho    0,          // x1    0,          // y1    0,          // x2    5,          // y2    90));       // theta// element 2 f.add_element(new element(    2e8,        // E    0.00048,    // I     0.075,      // A    5,          // L    7880,       // rho    0,          // x1    5,          // y1    0,          // x2    10,         // y2    90));       // theta// create global stiffness matrix and print resultf.global_k();Add elements to your frame structure using the add_element method of the frame class. Create the stiffness matrix and print the results using the global_k method of the frame class!Nodes for the stiffness matrix are only representative of each element’s end points, x1, y1, x2, and x2. Installation Instructions  Install linear algebra library, Armadillo here.  git clone https://github.com/lewisj34/2DFrameStiffness.git in the directory or location of your choice.  cd buld &amp;&amp; make &amp;&amp; ./stiff to run the example loaded. Expected output:The global stifness matrix is shown below:   9.2160e+03            0  -2.3040e+04  -9.2160e+03            0  -2.3040e+04            0            0            0            0            0            0            0   3.0000e+06            0            0  -3.0000e+06            0            0            0            0            0            0            0  -2.3040e+04            0   7.6800e+04   2.3040e+04            0   3.8400e+04            0            0            0            0            0            0  -9.2160e+03            0   2.3040e+04   2.5184e+06            0            0  -9.2160e+03            0  -2.3040e+04  -2.5000e+06            0            0            0  -3.0000e+06            0            0   6.0053e+06   1.6000e+04            0  -3.0000e+06            0            0  -5.3333e+03   1.6000e+04  -2.3040e+04            0   3.8400e+04            0   1.6000e+04   2.1760e+05   2.3040e+04            0   3.8400e+04            0  -1.6000e+04   3.2000e+04            0            0            0  -9.2160e+03            0   2.3040e+04   9.2160e+03            0   2.3040e+04            0            0            0            0            0            0            0  -3.0000e+06            0            0   3.0000e+06            0            0            0            0            0            0            0  -2.3040e+04            0   3.8400e+04   2.3040e+04            0   7.6800e+04            0            0            0            0            0            0  -2.5000e+06            0            0            0            0            0   2.5000e+06            0            0            0            0            0            0  -5.3333e+03  -1.6000e+04            0            0            0            0   5.3333e+03  -1.6000e+04            0            0            0            0   1.6000e+04   3.2000e+04            0            0            0            0  -1.6000e+04   6.4000e+04",
            "content_html": "<p><em><font size=\"5\"> Basic Introduction</font></em></p><p>This is a short and sweet C++ framework to generate a global stiffness matrix for any 2D frame structure. Linear algebra library, <a href=\"http://arma.sourceforge.net/docs.html#set_size\">Armadillo</a>, was used for matrix generation. Basic user input looks like this in <code class=\"language-plaintext highlighter-rouge\">int main()</code></p><figure class=\"highlight\"><pre><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"c1\">// instantiate frame object, f </span><span class=\"n\">frame</span> <span class=\"n\">f</span><span class=\"p\">;</span> <span class=\"c1\">// element 1 </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">add_element</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nf\">element</span><span class=\"p\">(</span>    <span class=\"mf\">2e8</span><span class=\"p\">,</span>        <span class=\"c1\">// E</span>    <span class=\"mf\">0.00048</span><span class=\"p\">,</span>    <span class=\"c1\">// I </span>    <span class=\"mf\">0.075</span><span class=\"p\">,</span>      <span class=\"c1\">// A</span>    <span class=\"mi\">5</span><span class=\"p\">,</span>          <span class=\"c1\">// L</span>    <span class=\"mi\">7880</span><span class=\"p\">,</span>       <span class=\"c1\">// rho</span>    <span class=\"mi\">0</span><span class=\"p\">,</span>          <span class=\"c1\">// x1</span>    <span class=\"mi\">0</span><span class=\"p\">,</span>          <span class=\"c1\">// y1</span>    <span class=\"mi\">0</span><span class=\"p\">,</span>          <span class=\"c1\">// x2</span>    <span class=\"mi\">5</span><span class=\"p\">,</span>          <span class=\"c1\">// y2</span>    <span class=\"mi\">90</span><span class=\"p\">));</span>       <span class=\"c1\">// theta</span><span class=\"c1\">// element 2 </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">add_element</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nf\">element</span><span class=\"p\">(</span>    <span class=\"mf\">2e8</span><span class=\"p\">,</span>        <span class=\"c1\">// E</span>    <span class=\"mf\">0.00048</span><span class=\"p\">,</span>    <span class=\"c1\">// I </span>    <span class=\"mf\">0.075</span><span class=\"p\">,</span>      <span class=\"c1\">// A</span>    <span class=\"mi\">5</span><span class=\"p\">,</span>          <span class=\"c1\">// L</span>    <span class=\"mi\">7880</span><span class=\"p\">,</span>       <span class=\"c1\">// rho</span>    <span class=\"mi\">0</span><span class=\"p\">,</span>          <span class=\"c1\">// x1</span>    <span class=\"mi\">5</span><span class=\"p\">,</span>          <span class=\"c1\">// y1</span>    <span class=\"mi\">0</span><span class=\"p\">,</span>          <span class=\"c1\">// x2</span>    <span class=\"mi\">10</span><span class=\"p\">,</span>         <span class=\"c1\">// y2</span>    <span class=\"mi\">90</span><span class=\"p\">));</span>       <span class=\"c1\">// theta</span><span class=\"c1\">// create global stiffness matrix and print result</span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">global_k</span><span class=\"p\">();</span></code></pre></figure><p>Add elements to your frame structure using the <code class=\"language-plaintext highlighter-rouge\">add_element</code> method of the <code class=\"language-plaintext highlighter-rouge\">frame</code> class. Create the stiffness matrix and print the results using the <code class=\"language-plaintext highlighter-rouge\">global_k</code> method of the <code class=\"language-plaintext highlighter-rouge\">frame</code> class!</p><p>Nodes for the stiffness matrix are only representative of each element’s end points, <code class=\"language-plaintext highlighter-rouge\">x1</code>, <code class=\"language-plaintext highlighter-rouge\">y1</code>, <code class=\"language-plaintext highlighter-rouge\">x2</code>, and <code class=\"language-plaintext highlighter-rouge\">x2</code>.</p><p><em><font size=\"5\"> Installation Instructions</font></em></p><ol>  <li>Install linear algebra library, Armadillo <a href=\"http://arma.sourceforge.net/download.html\">here</a>.</li>  <li><code class=\"language-plaintext highlighter-rouge\">git clone https://github.com/lewisj34/2DFrameStiffness.git</code> in the directory or location of your choice.</li>  <li><code class=\"language-plaintext highlighter-rouge\">cd buld &amp;&amp; make &amp;&amp; ./stiff</code> to run the example loaded. Expected output:</li></ol><figure class=\"highlight\"><pre><code class=\"language-cpp\" data-lang=\"cpp\"><span class=\"n\">The</span> <span class=\"n\">global</span> <span class=\"n\">stifness</span> <span class=\"n\">matrix</span> <span class=\"n\">is</span> <span class=\"n\">shown</span> <span class=\"n\">below</span><span class=\"o\">:</span>   <span class=\"mf\">9.2160e+03</span>            <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"mf\">2.3040e+04</span>  <span class=\"o\">-</span><span class=\"mf\">9.2160e+03</span>            <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"mf\">2.3040e+04</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>   <span class=\"mf\">3.0000e+06</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"mf\">3.0000e+06</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"mf\">2.3040e+04</span>            <span class=\"mi\">0</span>   <span class=\"mf\">7.6800e+04</span>   <span class=\"mf\">2.3040e+04</span>            <span class=\"mi\">0</span>   <span class=\"mf\">3.8400e+04</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"mf\">9.2160e+03</span>            <span class=\"mi\">0</span>   <span class=\"mf\">2.3040e+04</span>   <span class=\"mf\">2.5184e+06</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"mf\">9.2160e+03</span>            <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"mf\">2.3040e+04</span>  <span class=\"o\">-</span><span class=\"mf\">2.5000e+06</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"mf\">3.0000e+06</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>   <span class=\"mf\">6.0053e+06</span>   <span class=\"mf\">1.6000e+04</span>            <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"mf\">3.0000e+06</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"mf\">5.3333e+03</span>   <span class=\"mf\">1.6000e+04</span>  <span class=\"o\">-</span><span class=\"mf\">2.3040e+04</span>            <span class=\"mi\">0</span>   <span class=\"mf\">3.8400e+04</span>            <span class=\"mi\">0</span>   <span class=\"mf\">1.6000e+04</span>   <span class=\"mf\">2.1760e+05</span>   <span class=\"mf\">2.3040e+04</span>            <span class=\"mi\">0</span>   <span class=\"mf\">3.8400e+04</span>            <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"mf\">1.6000e+04</span>   <span class=\"mf\">3.2000e+04</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"mf\">9.2160e+03</span>            <span class=\"mi\">0</span>   <span class=\"mf\">2.3040e+04</span>   <span class=\"mf\">9.2160e+03</span>            <span class=\"mi\">0</span>   <span class=\"mf\">2.3040e+04</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"mf\">3.0000e+06</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>   <span class=\"mf\">3.0000e+06</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"mf\">2.3040e+04</span>            <span class=\"mi\">0</span>   <span class=\"mf\">3.8400e+04</span>   <span class=\"mf\">2.3040e+04</span>            <span class=\"mi\">0</span>   <span class=\"mf\">7.6800e+04</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"mf\">2.5000e+06</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>   <span class=\"mf\">2.5000e+06</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"mf\">5.3333e+03</span>  <span class=\"o\">-</span><span class=\"mf\">1.6000e+04</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>   <span class=\"mf\">5.3333e+03</span>  <span class=\"o\">-</span><span class=\"mf\">1.6000e+04</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>   <span class=\"mf\">1.6000e+04</span>   <span class=\"mf\">3.2000e+04</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>            <span class=\"mi\">0</span>  <span class=\"o\">-</span><span class=\"mf\">1.6000e+04</span>   <span class=\"mf\">6.4000e+04</span></code></pre></figure>",
            "url": "https://lewisj34.github.io//2021/01/02/genstiffmatrix2dframe",
            
            
            
            
            
            "date_published": "2021-01-02T19:12:52+01:00",
            "date_modified": "2021-01-02T19:12:52+01:00",
            
                "author":  {
                "name": "gesko",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}